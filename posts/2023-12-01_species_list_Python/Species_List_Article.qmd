---
title: "Make a species list for a Local Government Area (LGA)"
description: |
  Knowing what species have been observed in a local area is an important, regular task for ecosystem management and environmental impact assessment. Here we show how to use `galah-python` to make a species list using layers available in `galah-python`, using a shapefile, 
author:
  - name: "Amanda Buyan"
  - name: "Dax Kellie"
date: "2023-11-23"
title-block-banner: "#B8573E"
include-after-body: _footer.html
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Animalia
  - Chordata
  - Anura
  - Maps
image: tbd
draft: true
freeze: true
engine: knitr
jupyter: python3
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>



<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  
[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  

#### Date
23 November 2023

:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg")
```
:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg")
```
:::

:::

<!------------------------ Post starts here ------------------------>

Knowing what species inhabit an area is important for conservation and ecosystem management. It is also useful to know how common or rare each species might be.

To accomplish this, species lists are a frequent tool to assess what species are in a given area for monitoring and environmental impact assessments. Often, these lists are asked to be produced for specific regions like Local Government Areas (LGAs) or specific monitoring locations within a region.

In this post, we show how to use `galah-python` and `geopandas` to generate a species list for an Local Government Area—the Yass Valley—over the past year.

# Make a species list

There are two ways to narrow a query to return information for a specific region:  

  * Using fields available in `galah-python` (downloaded from the ALA)
  * Using a shapefile
  
The method you choose depends on whether the region you wish to return species for is already within `galah-python` and whether you require a list for a more specific area defined by a shapefile.

Let's go through each of the methods in turn to return a list of species in the Yass Valley in 2023.

First, let's import galah.

```{python}
import galah
```

## galah-python fields

### Search for fields

Let's find which fields and layers exist within `galah-python` for us to use to narrow our query to a specific LGA region and year.

We can use the `search_all()` function to search for many types of information in `galah-python`. Let's use it to look up what `field`s contain the word "year". Our search returns several options, though the best option seems to be field `id` `"year"`.

```{python}
galah.search_all(fields="year")
```

If we want to double check whether a given field contains information we are interested in, we can use the `show_values()` to see what categories a specified `field` contains.

```{python}
galah.show_values(field="year")
```

Now let's use the same process to find whether any fields contain spatial data of Local Government Areas.

```{python}
galah.search_all(fields="Local Government Areas")
```

There are several options, though `cl10923` seems to be contain the most recent data (from 2018). Let's check what this `field` contains.

```{python}
galah.show_values(field="cl10923")
```

We can also check whether it contains Yass Valley specifically with `search_values()`.

```{python}
galah.search_values(field="cl10923", value = "YASS VALLEY")
```


:::.callout-note
Each spatial layer has a two letter code, along with a number to identify it.  The abbreviations are as follows:

  * `cl` = contextual layer (i.e. boundaries of LGAs, Indigenous Protected Areas, States/Territories etc.)  
  * `10923` = number associated with the spatial layer in the atlas

:::


### Make species list

Now we can use the `year` and `cl10923` fields to build a query to get a list of species that were observed in Yass Valley over 2023. We can use `atlas_species()` to return a species list, and use the `filters` argument to narrow our query.

```{python}
galah.atlas_species(filters=["year=2023","cl10923=YASS VALLEY COUNCIL"])
```

To add the observation count for each species, add `counts=True`.

```{python}
species_yass = galah.atlas_species(filters=["year=2023","cl10923=YASS VALLEY COUNCIL"],counts=True)
species_yass
```

To save this species list as a csv, we can use `to_csv()` from the `pandas dataframe` package.

```{python}
species_yass.to_csv("Species_List_Yass_Valley_Counts_ALA_Spatial_Filter.csv")
```


## Shapefile

Let's download the latest Local Government Areas data from the [Australian Bureau of Statistics Digital Boundary files page](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files).  Find "Local Government Areas - 2023 - Shapefile" and click "Download ZIP". Save the zip folder in your current directory and unzip it.

We'll use `read_file()` from `geopandas` to load our shapefile.

```{python}
import geopandas as gpd
LGAs_2023 = gpd.read_file("LGA_2023_AUST_GDA2020.shp")
LGAs_2023
```

Now let's set Coordinate Reference System (CRS) of our shapefile.  A CRS is a method of representing coordinates of the spherical earth onto a flat, two-dimensional map. ALA observations are projected using  [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System) (the standard used in cartography and GPS), also known as [EPSG](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset):4326. 

`geopandas` has a handy CRS-setting function, `to_crs()`. 

```{python}
LGAs_2023 = LGAs_2023.to_crs(4326)
LGAs_2023.plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,5))
```

[*I don't think this is something beginner users will find useful. I assume they just want to get a list. I suggest removing the below chunk of code*]

```{python}
#| eval: false
#| echo: false
from matplotlib import pyplot as plt
NSW = LGAs_2023[LGAs_2023['STE_NAME21'] == "New South Wales"]
NSW.plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (14,10))
NSW['coords'] = NSW['geometry'].apply(lambda x: x.representative_point().coords[:][0] if x is not None else None)
for idx, row in NSW.iterrows():
    if row['coords'] is not None:
        plt.annotate(text=row['LGA_NAME23'], xy=row['coords'],
                    horizontalalignment='center', fontsize = 8)
```

We'll filter our shapefile to only Yass Valley. The column `LGA_NAME23` appears to contain names we can use to filter our `Dataframe`, and the column `geometry` contains information to draw our LGA shape.

```{python}
NSW.columns
```

We can filter to return only the row with information of `Yass Valley`.

```{python}
NSW[NSW['LGA_NAME23'] == "Yass Valley"]
```

We can also add the `geometry` column by adding its name within brackets (`[]`) at end of the dataframe.

```{python}
yass_valley = NSW[NSW['LGA_NAME23'] == "Yass Valley"]["geometry"]
yass_valley
```

To use this shape to return a species list, we need to provide `atlas_species()` the `geometry` information to narrow our query. Let's save it as `yass_valley_geometry` and pass it to the `polygon` argument of `atlas_species()`. [*Rather than choose row 127 of your shapefile, I think it's simpler to save your filtered object, then just select row 1. I've ameneded this as I think it's easier for beginners to understand*] 

```{python}
yass_valley_geometry = NSW[NSW['LGA_NAME23'] == "Yass Valley"]["geometry"][1]
galah.atlas_species(polygon=yass_valley_geometry)
```

We can also narrow our query to only 2023 observations by adding year to `filters`.

```{python}
galah.atlas_species(polygon=yass_valley_geometry,filters="year=2023")
```

To add the observation count for each species, add `counts=True`.

```{python}
species_yass = galah.atlas_species(polygon=yass_valley_geometry,filters="year=2023",counts=True)
species_yass
```

To save this species list as a csv, we can use `to_csv()` from the `pandas dataframe` package.

```{python}
species_yass.to_csv("Species_List_Yass_Valley_Counts_ALA_Spatial_Filter.csv")
```


## Use threatened species list

Often, it's useful to know what species in a given location are threatened or sensitive species. The ALA contains many lists, including national and regional threatened species lists, so it's possible to use `galah-python` to find which species are threatened or sensitive to extinction risk.

Let's use `show_all()` again, this time using the `lists` option to return the lists available in the ALA and their `listType`.

```{python}
galah.show_all(lists=True)
```

[*this example is a bit opaque when the user can't see the columns you are talking about. Is there a way to display the columns you want to filter?*]

A quick way to filter to lists from trusted authorities is to use the `isAuthoritative` column, where the ALA has set any authoritative lists as `True`. We can do the same to return lists of threatened species using the `isThreatened` column.

```{python}
lists_all = galah.show_all(lists=True)
lists_authoritative = lists_all[lists_all['isAuthoritative'] == True]
lists_authoritative_threatened = lists_all[lists_all['isThreatened'] == True]
lists_authoritative_threatened
```

[*I think that it's better to maybe do a text search for 'New South Wales'? That way users could find one that's useful for their own purposes*] We can also see that the sixth row is titled `New South Wales : Conservation List`, which is what we will be using.

[*Which option is more efficient? I'd probably only provide one option*] If you were not concerned only with threatened species, you could either use the authoritative lists, or instead search for lists that have `New South Wales` in the title using the `search_all()` function in `galah-python`.

```{python}
galah.search_all(lists="New South Wales")
```


To narrow a query to species on a species list (despite the column name of the lists reading `dataResourceUid`), use the field `species_list_uid` to supply the species list `id` of our desired list to the `filters` argument.

```{python}
galah.atlas_species(polygon=yass_valley_geometry,filters=["year=2023","species_list_uid=dr650"],counts=True)
```

# Final thoughts

We hope blah blah, any ways to extend this?

<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{python}
#| echo: false
import math
import natsort
import pandas
import session_info

session_info.show()
```

</details>
