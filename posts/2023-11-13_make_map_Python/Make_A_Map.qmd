---
title: "Make a map of species observations in under 5 minutes"
description: |
  The ability to make a map quickly is an essential skill in ecology and conservation. This post shows how to make a quick, simple map of Peron's tree frog occurrences using `galah-python`, `geopandas` & `matplotlib`.
author:
  - name: "Amanda Buyan"
  - name: "Dax Kellie"
date: "2023-11-23"
title-block-banner: "#B8573E"
include-after-body: _footer.html
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Animalia
  - Chordata
  - Anura
  - Maps
image: tbd
draft: true
freeze: true
engine: knitr
jupyter: python3
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>



<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  
[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  

#### Date
23 November 2023

:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg")
```
:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg")
```
:::

:::

<!------------------------ Post starts here ------------------------>

Maps are one of the most common and useful data visualisation tools in an ecologist's tool belt. Making a quick and simple map of species observations is especially useful when first investigating where a species has occurred. Viewing locations of points helps to understand the extent of your data (and spot possible errors or outliers). 

In this post, we will use Python to make a map in under 5 minutes of Peron's tree frog (*Litoria peronii*) observations in New South Wales, Australia recorded by FrogID since 2018 using the `galah_python`, `geopandas` and `matplotlib` packages.  

## Download data

Peron's Tree frog is one of the most recorded frog species in the Atlas of Living Australia. Growing up to 7cm in length, it is well-known for its eyes which often look like they have a black cross on them!

*[add photos of frogs. I've added the code to do this, but the photos and information need to be updated (they are currently of dingoes).]*

::: {layout-ncol="3" style="margin-left: auto; margin-right: auto;"}
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/5/b/b/19578b8d-f8a3-4ae8-a139-60f9d4d6bb55/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/c/8/a/5/2716b0eb-0d0f-41cd-9c33-d517f45e5a8c/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/3/2/4/a/5f426a63-4b4f-4def-b6ed-14316b40a423/original" class="rounded"/></img>
:::

::: figure-caption
Left: [*Canis familiaris* (Michael Hains CC-BY-NC 3.0 (Au)](https://biocache.ala.org.au/occurrences/4d4a1b5d-f70f-4286-9282-3c325cdf2646), Middle: [*Canis familiaris* (GibberGavin CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/24b77a44-2a8d-4d16-a4e3-41823d1fc8ca), Right: [*Canis familiaris* (Danial Moore CC-BY-NC 3.0 (Au))](https://biocache.ala.org.au/occurrences/64cc4167-9f4f-495c-b4be-b0a5e2ca57de)
:::

First, let's import `galah-python`.

```{python}
#| eval: true
#| message: false
#| warning: false
import galah
```

*[Add info about how to find fields of interest to help narrow a query.]*

Let's map the locations of Peron's tree frog since 2018 in New South Wales by FrogID.



Next, let's find how many records there are of Peron's tree frog that match our query. It's good practice check how many observations there are of a given species so you know how many to expect when you download them! 

We'll use `atlas_counts()` to download record counts, specifying the taxon we want using the `taxa` argument, and narrowing the year range, state/territory and data resource using the `filter` argument.

```{python}
galah.atlas_counts(                      # *Download record counts*
    taxa="litoria peronii",              # *of Peron's tree frog*
    filters=["year>=2018",               # *since 2018*
             "cl22=New South Wales",     # *in New South Wales*
             "dataResourceName=FrogID"]  # *by FrogID*
)
```

Now we can use `atlas_occurrences()` to download occurrence records!

You will need to first provide a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) using `galah_config()` before retrieving records.

```{python}
#| echo: false
#| eval: true
galah.galah_config(email = "amanda.buyan@csiro.au")
```

```{python}
#| echo: true
#| eval: false
galah.galah_config(email = "your-email-here")
```

```{python}
frogs = galah.atlas_occurrences(
    taxa="litoria peronii",
    filters=["year>=2018",
             "cl22=New South Wales",
             "dataResourceName=FrogID"]
)
frogs
```


*[Do beginners need to know how to select our these columns? I don't think they do to finish making the map. I suggest deleting]*

As we can see, we get a lot of columns by default from the ALA!  To see which columns that are available, we can type the following code:

```{python}
frogs = galah.atlas_occurrences(
    taxa="litoria peronii",
    filters=["year>=2018",
             "cl22=New South Wales",
             "dataResourceName=FrogID"]
)
frogs.columns
```

Since we only want to make a map using the species name, latitude and longitude, we can specify the data columns we want by using the `fields` argument, and using the column names `scientificName`,`decimalLatitude`, and `decimalLongitude`.

```{python}
galah.atlas_occurrences(
    taxa="litoria peronii",
    filters=["year>=2018",
             "cl22=New South Wales",
             "dataResourceName=FrogID"],
    fields=["scientificName","decimalLatitude","decimalLongitude"]
)
```

# Make a map

It's time to make our map!  

[*Question: Doesn't the shapefile need to be in the same folder as your script? Or, like, wherever your Python environment is? I'd suggest an edit to specify this*]

In order to draw our map of New South Wales, we'll download a shapefile of the latest state and territory boundaries from the Australian Bureau of statistics (link [here](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files)). Download the "States and Territories - 2021 - Shapefile" zip folder, save the zip folder somewhere you can easily access and then unzip the folder.

Let's load our States and Territories shapefile with `read_file()` and save it as `states` and filter our shapefile to only New South Wales.

[*Another question: is it best practice (like in R) to add packages at the start or only whenever they are needed?, If at the start, I'd suggest moving all imports to the beginning of this script*]

```{python}
from matplotlib import pyplot as plt
import geopandas as gpd

# Load Australian state and territory boundaries
states = gpd.read_file("STE_2021_AUST_GDA94.shp")

# Filter to New South Wales
states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))
```

We will also set the Coordinate References System (CRS), which determines how our points on the spherical globe are oriented when drawn as a flat surface. The projection of ALA data is EPSG:4326 (also known as "WGS84"). Setting the CRS allows us to make sure the points of our data align correctly with our shapefile.

```{python}
states = states.to_crs(4326)
```

[*This part needs more explanation as to what's going on*]

Now, we will add our species data to the map.

```{python}
ax = states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))
plt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = "#6fab3f", alpha = 0.5)
```

For some final touches (to make the map prettier), we can add labels, titles and legends, as well as save the figure.

```{python}
#| column: screen-inset
#| fig-align: center
#| fig-height: 9
#| fig-width: 10
#| warning: false
#| message: false

ax = states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))
plt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = "#6fab3f", alpha = 0.5, label = "Litoria peronii")
plt.legend()
ax.set_xlabel("Longitude",fontsize=16)
ax.set_ylabel("Latitude",fontsize=16)
plt.title("Peron's tree frog\nFrogID observations in New South Wales since 2018",fontsize=20)
```

To save your plot in your current folder, you can use:

```{python}
#| eval: false
plt.savefig("perons_tree_frog_nsw.png")
```


[*Would it be useful to add the complete code in a dropdown code chunk? I'm debating this*]

# Final thoughts

We hope this post has helped make the basic steps of making a map simple and easy to understand. For more advanced mapping in Python, check out our ALA Labs article on [how to map invasive species](https://labs.ala.org.au/posts/2023-04-28_plotting-invasive-species/post.html).


<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{python}
#| echo: false
import math
import natsort
import pandas
import session_info

session_info.show()
```

</details>
