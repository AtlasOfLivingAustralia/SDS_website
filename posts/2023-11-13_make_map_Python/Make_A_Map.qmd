---
title: "Make a map of species observations in under 5 minutes"
description: |
  The ability to make a map quickly is an essential skill in ecology and conservation. This post shows how to make a quick, simple map of Peron's tree frog occurrences using `galah-python`, `geopandas` & `matplotlib`.
author:
  - name: "Amanda Buyan"
  - name: "Dax Kellie"
date: "2023-11-23"
title-block-banner: "#B8573E"
include-after-body: _footer.html
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Animalia
  - Chordata
  - Anura
  - Maps
image: tbd
draft: true
freeze: true
engine: knitr
jupyter: python3
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>



<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  
[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  

#### Date
23 November 2023

:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg")
```
:::

:::{.author-card-image}
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg")
```
:::

:::

<!------------------------ Post starts here ------------------------>

Maps are one of the most common and useful data visualisation tools in an ecologist's tool belt. Making a quick and simple map of species observations is especially useful when first investigating where a species has occurred. Viewing locations of points helps to understand the extent of your data (and spot possible errors or outliers). 

In this post, we will use Python to make a map in under 5 minutes of Peron's tree frog (*Litoria peronii*) observations in New South Wales, Australia recorded by FrogID since 2018 using the `galah_python`, `geopandas` and `matplotlib` packages.  

## Download data

Peron's Tree frog is one of the most recorded frog species in the Atlas of Living Australia. Growing up to 7cm in length, it is well-known for its eyes which often look like they have a black cross on them!

::: {layout-ncol="3" style="margin-left: auto; margin-right: auto;"}
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/8/e/f/0/b32e7003-0ab0-4d8d-95af-b8ea4e730fe8/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/6/4/2/201f6e7f-9a28-4acd-8ac8-f089f6fb2462/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/b/7/4/41d58826-abce-4647-8c25-335f145647b1/original" class="rounded"/></img>
:::

::: figure-caption
Left: [*Litoria peronii* (Giverny CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/4d4a1b5d-f70f-4286-9282-3c325cdf2646), Middle: [*Litoria peronii* (debtaylor142 CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/ed5f63f8-be87-41e0-9382-894c3fc45eda), Right: [*Litoria peronii* (Ernst Weiher, iNaturalist CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e0cd9d37-c994-40f3-95dd-d5da09b12b67)
:::

First, let's import `galah-python`.

```{python}
#| eval: true
#| message: false
#| warning: false
import galah
```

To run a command asking `galah-python` to tell you the total number of records the Atlas of Living Australia has, use `atlas_counts`.

```{python}
#| eval: true
#| message: false
#| warning: false
galah.atlas_counts()
```

We can then narrow down the number of record counts by providing one or more of the following:

- Species scientific name(s)
- Filters

To find species' scientific names, we suggest using the `search_taxa()` function of `galah-python` or by doing a Google search of your favourite species.  To find other ways to narrow your query, you can use the `galah.show_all()` command, which will show you all possible fields to narrow search.  However, if you want to search for a particular string of text in a field, use the `galah.search_all()` function.

```{python}
#| eval: false
#| echo: true
#| warning: false
galah.search_all(fields="year")
```

```{python}
#| eval: true
#| echo: false
#| warning: false
import pandas as pd
pd.set_option('display.max_columns', None)
pd.set_option('expand_frame_repr', False)
galah.search_all(fields="year")
```

If we were to choose `year` as our filter, the other things we need to do is to find what value we want to filter by.  To find all possible values of `year`, use the `show_values()` function.  To search for specific values, use the `search_values()` function.

Let's map the locations of Peron's tree frog since 2018 in New South Wales by FrogID.  First, we will find how many records there are of Peron's tree frog that match our query. It's good practice check how many observations there are of a given species so you know how many to expect when you download them! 

We'll use `atlas_counts()` to download record counts, specifying the taxon we want using the `taxa` argument, and narrowing the year range, state/territory and data resource using the `filters` argument.

```{python}
galah.atlas_counts(                      # *Download record counts*
    taxa="litoria peronii",              # *of Peron's tree frog*
    filters=["year>=2018",               # *since 2018*
             "cl22=New South Wales",     # *in New South Wales*
             "dataResourceName=FrogID"]  # *by FrogID*
)
```

<aside>
For a step-by-step explanation on how to form this query in Python, visit [this galah-python workhop episode](https://atlasoflivingaustralia.github.io/galah-python-workshop/02-Building-An-Example-Query/index.html).
</aside>

Now we can use `atlas_occurrences()` to download occurrence records!

You will need to first provide a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) using `galah_config()` before retrieving records.

```{python}
#| echo: false
#| eval: true
galah.galah_config(email = "amanda.buyan@csiro.au")
```

```{python}
#| echo: true
#| eval: false
galah.galah_config(email = "your-email-here")
frogs = galah.atlas_occurrences(
    taxa="litoria peronii",
    filters=["year>=2018",
             "cl22=New South Wales",
             "dataResourceName=FrogID"]
)
frogs
```

```{python}
#| echo: false
#| eval: true
import pandas as pd
pd.set_option('display.max_columns', None)
frogs = galah.atlas_occurrences(
    taxa="litoria peronii",
    filters=["year>=2018",
             "cl22=New South Wales",
             "dataResourceName=FrogID"]
)
frogs
```

As we can see, we get 8 columns by default from the ALA; to make our map,however, we only need `scientificName`,`decimalLatitude`, and `decimalLongitude` columns.

# Make a map

It's time to make our map!  

In order to draw our map of New South Wales, we'll download a shapefile of the latest state and territory boundaries from the Australian Bureau of statistics (link [here](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files)). Download the "States and Territories - 2021 - Shapefile" zip file, and save the zip file in the same folder you are coding in.

Let's load our States and Territories shapefile with `read_file()` and save it as `states`.  Then, we will choose the part of the shape that represents New South Wales.  We will also specify that the edges of the shape are black, the inside of the shape is white, and the figure size is in inches, the default unit for matplotlib.

```{python}
from matplotlib import pyplot as plt
import geopandas as gpd

# Load Australian state and territory boundaries
states = gpd.read_file("STE_2021_AUST_GDA94.shp")

# Filter to New South Wales and plot
states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))
```

We will also set the Coordinate References System (CRS), which determines how our points on the spherical globe are oriented when drawn as a flat surface. The projection of ALA data is EPSG:4326 (also known as "WGS84"). Setting the CRS allows us to make sure the points of our data align correctly with our shapefile.

```{python}
states = states.to_crs(4326)
```

Now, we will add our species data to the map.  First, we will plot our reprojected shapefile.  Then, we will overlay a scatter plot using `decimalLongitude` as your x axis and `decimalLatitude` as your y axis.  `c` represents the colour for the scatterplot points, and alpha is how transparent the points are (`1` is no transparency, `0` is fully transparent).

```{python}
states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))
plt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = "#6fab3f", alpha = 0.5)
```

For some final touches (to make the map prettier), we can add labels, titles and legends, as well as save the figure.

```{python}
#| column: screen-inset
#| fig-align: center
#| fig-height: 9
#| fig-width: 10
#| warning: false
#| message: false

states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))
plt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = "#6fab3f", alpha = 0.5, label = "Litoria peronii")
plt.legend()
plt.xlabel("Longitude",fontsize=16)
plt.ylabel("Latitude",fontsize=16)
plt.title("Peron's tree frog\nFrogID observations in New South Wales since 2018",fontsize=20)
```

To save your plot in your current folder, you can use:

```{python}
#| eval: false
plt.savefig("perons_tree_frog_nsw.png")
```

```{python}
#| code-fold: true
#| eval: false

import galah
from matplotlib import pyplot as plt
import geopandas as gpd

# Load Australian state and territory boundaries
states = gpd.read_file("STE_2021_AUST_GDA94.shp")

# Filter to New South Wales
states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))

# Change your Coordinate Reference System to the same as the ALA CRS
states = states.to_crs(4326)

# Plot your shape file
ax = states[states["STE_NAME21"] == "New South Wales"].plot(edgecolor = "#5A5A5A", linewidth = 0.5, facecolor = "white", figsize = (12,6))

# Plot your species points over the shape file
plt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = "#6fab3f", alpha = 0.5)

# add a legend to show what species you are plotting
plt.legend()

# set X and Y label so users know they are looking at degrees latitude and longitude
ax.set_xlabel("Longitude",fontsize=16)
ax.set_ylabel("Latitude",fontsize=16)

# add a title to your plot
plt.title("Peron's tree frog\nFrogID observations in New South Wales since 2018",fontsize=20)
```

# Final thoughts

We hope this post has helped make the basic steps of making a map simple and easy to understand. For more advanced mapping in Python, check out our ALA Labs article on [how to map invasive species](https://labs.ala.org.au/posts/2023-04-28_plotting-invasive-species/post.html).


<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{python}
#| echo: false
import math
import natsort
import pandas
import session_info

session_info.show()
```

</details>
