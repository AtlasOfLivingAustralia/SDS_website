---
title: "Alternatives to box plots: Ridgeline plots"
description: | 
 Graphing large groups of ecological data can become crowded quickly. Presenting this information in a singular concise, accessable and aesthetically pleasing visualisation might seem difficult. If you want to plot large groups of data on the same graph and present possible trends or patterns between these groups, a ridgeline plot might be the answer. 
author:
  - name: "Dax Kellie"
  - name: "Shandiya Balasubramaniam"
  - name: "Olivia Torresan"
date: "2023-05-16"
title-block-banner: "#B8573E"
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Animalia
  - Chordata
  - Aves
  - Summaries
image: tbd
draft: true
freeze: true
editor_options: 
  chunk_output_type: inline
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>


<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Dax Kellie](https://labs.ala.org.au/about/Kellie_Dax/index.html)  
[Shandiya Balasubramaniam](https://labs.ala.org.au/about/Balasubramaniam_Shandiya/index.html)  
[Olivia Torresan](https://labs.ala.org.au/about/Torresan_Olivia/)  

#### Date
5 May 2023

:::


:::

:::{.row-b layout-ncol="3" style="margin-left: auto; margin-right: auto; margin-top: auto; margin-bottom: auto;"}

:::{.author-card-image style="width: auto; height: 120px; margin-right: auto;"}
<img src="https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg" style="object-fit: cover; border-radius: 50% !important; width: 140px;"></img>

:::

:::{.author-card-image style="width: auto; height: 120px; margin-right: auto;"}
<img src="https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/shandiya.png" style="object-fit: cover; border-radius: 50% !important; width: 140px;"></img>

:::

:::{.author-card-image style="width: auto; height: 120px; margin-right: auto !important;"}
<img src="https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/olivia.jpg" style="object-fit: cover; border-radius: 50% !important; width: 140px;"></img>

:::
:::
:::

<!------------------------ Post starts here ------------------------>


Ridgeline plots are great ways to visualise and compare patterned ecological data. In ecology, temporal or time related trends are commonly expressed patterns (for example, seasonality). They are also particularly useful when comparing a large number of groups, which may be presented in an overly cramped manner in other graph styles. Some examples of ecological data appropriate to a ridgeline plot might be: the frequency of a species observed through time (date), or the frequency of a group of species observed across given climatic variables (increasing temperature).  


Here, we plot the daily number of observations of Wader or shorebirds through time in a small bioregion within northern Western Australia. This sub bioregion, Pindanland, within the broader bioregion of Dampierland, is home to many seasonally prominent birds, especially large numbers of migratory birds within the extensive coastal mudflats. As such, we can expect some kind of temporal trends within our occurrence data. 
 

Let's start by loading the R packages that we will need. 

```{r}
#| warning: FALSE
library(galah)
library(tidyverse)
library(ggridges)
```


We'll use the [{galah} package](https://galah.ala.org.au) to download occurrence records from the [Atlas of Living Australia (ALA)](https://www.ala.org.au). To do this, you'll need to [register your email address with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount), then pass it to {galah} using `galah_config()`.


```{r}
#| include: FALSE
galah_config(email = "dax.kellie@csiro.au", atlas = "Australia")
```

```{r}
#| eval: FALSE
galah_config(email = "your-email@email.com")
```

## Download data 

In [{galah}](https://galah.ala.org.au), you can search available fields to filter your data by. These are shortened by an identifier to make the filtering process streamlined. First we need to figure out what ID our region of interest (Pindanland)  corresponds to. It is a subregion of a wider IBRA bioregion (Dampierland), so it will take the code cl1049 for IBRA subregions. 

```{r}
search_all(fields, "ibra")
```

It is a subregion of a wider IBRA bioregion (Dampierland), so it will take the code cl1049 for IBRA subregions. 

```{r}
search_all(fields, "cl1049") |> search_values("Pindanland")
```


Now we can use {galah} to refine a data download of Wader birds (from the order *Charadriiformes*) in Pindanland recorded after the year 2000. We further filter to ensure these records are not preserved museum specimen records, and then restrict our download to records identified to the species level. You can use `galah_apply_profile(ALA)` to enforce our standardised automatic data cleaning flags to reduce erroneous or suspicious records. 


```{r}
#| warning: FALSE
# download "wader" bird records
waders <- galah_call() |>
  galah_identify("Charadriiformes") |>
  galah_filter(year > 2000,
               cl1049 == "Pindanland",
               basisOfRecord == "HUMAN_OBSERVATION",
               taxonRank == "species") |>
  galah_apply_profile(ALA) |>
  galah_select(eventDate, scientificName, taxonRank) |>
  atlas_occurrences()
```


To clean our data for plotting, we first use the `as_date` function from the `<lubridate>` package to ensure the date is in a `<date>` format. We then extract the month only from each date (column = `EventDate`) into a new column using the `mutate` function for labeling our graph later. Lastly, we extract the Julian date (the numeric day of the year/ 365), for plotting purposes. This allows our data to be aggregated across all of the years (2000-2024) by a single numeric value. 


```{r}
# format date, extract month
waders_cleaned <- waders |>
  drop_na() |>
  mutate(
    eventDate = lubridate::as_date(eventDate),
    month = month(eventDate, abbr = TRUE, label = TRUE),
    date_julian = lubridate::yday(eventDate)
  )
```


We now filter our data to only include species groupings with more than 10 records to avoid species with too little records being plotted. We then ungroup this data post our filtering to create a new column that extracts the genus from our `scientificName`so that we can colour our ridgelines as per their genus groupings for easy readability. 

```{r}
waders_filtered <- waders_cleaned |>
  group_by(scientificName) |>
  filter(n_distinct(date_julian) >= 10) |>
  ungroup() |> 
  mutate(genus = gsub(" .*", "", scientificName))

genus_colors <- scales::hue_pal()(length(unique(waders_filtered$genus)))

```


Using `{ggplot2}` and `{ggridges}`, we can now create a ridgeline plot for our data

```{r}
#| warning: false
#| code-fold: true
#| fig-height: 7
#| fig-width: 10
#| column: page
#| fig-align: center
#| out-extra: "style=margin-left:auto;margin-right:auto;"
waderplot <- ggplot(
  data = waders_filtered,
  aes(
    x = date_julian,
    y = factor(scientificName, levels = rev(sort(unique(scientificName)))), #order in alphabetical order for readability
    fill = genus,  # Use the genus for fill color
    colour = genus  # Use the genus for line color
  )) +
  ggridges::geom_density_ridges(
    scale = 3,          # Adjust the scale to widen the ridges
    height = 0.05,      # Adjust the height to increase space between ridges
    alpha = .8,
    rel_min_height = 0.02
  ) +
  scale_x_continuous(
    breaks = c(1, 91, 182, 274, 365),  # Add a break for December
    labels = c("Jan", "Apr", "Jul", "Oct", "Dec"),  # Add label for December
    expand = c(0,0)
  ) +
  scale_y_discrete(expand = c(0,0)) +
  scale_fill_manual(values = genus_colors) +  # Set color scale for genus
  scale_color_manual(values = genus_colors) + # Set color scale for genus
  pilot::theme_pilot(
    grid = "v", # maintain only the vertical lines from the backing grid 
    axes = "" #remove axis lines for a cleaner appearance
  ) +
  labs(x = "Month 
2000 - 2024", #add x axis label 
       y = NULL) + # remove y axis labels 
  theme(legend.position = "none",
        axis.text.x = element_text(size = 6), #adjust axis text sizes 
        axis.text.y = element_text(size = 5), 
        axis.title.y = element_blank(), 
        axis.title.x = element_text(size = 7), 
        plot.margin = margin(t = 0.5, r = 0.5, b = 0.5, l = 0.5, unit = "cm"))  # Adjust whitespace / outside margin sizes 
waderplot
```




















```{r}
#| eval: false
#| echo: false
library(galah)
library(ggridges)
library(tidyverse)
library(showtext)

galah_config(email = "dax.kellie@csiro.au")

search_all(fields, "cl1048") |> search_values("northern")

waders <- galah_call() |>
  galah_identify("Charadriiformes") |>
  galah_filter(cl1048 == "Northern Kimberley") |>
  galah_apply_profile(ALA) |>
  atlas_occurrences()

waders_date <- waders |>
  mutate(eventDate = as_date(eventDate),
         date_julian = yday(eventDate))

font_add_google("Roboto")
pilot::set_pilot_family("Roboto")

ggplot(data = waders_date |> 
         filter(scientificName %in% sample(unique(scientificName), 40)),
       aes(x = date_julian, 
           y = scientificName,
           colour = scientificName,
           fill = scientificName)) +
  ggridges::geom_density_ridges(
    alpha = .8, size = 1, 
    rel_min_height = 0.02
  ) + 
  scale_x_continuous(breaks = c(1, 91, 182, 274),
                     labels = c("Jan", "Apr", "Jul", "Oct")) +
  labs(x = "Month", 
       y = "Species") +
  pilot::scale_fill_pilot() +
  pilot::scale_color_pilot() +
  pilot::theme_pilot(grid = "") + 
  theme(legend.position = "none",
        axis.text.x = element_blank(),
        axis.text.y = element_blank(),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        panel.border = element_blank(),
        panel.background = element_rect(fill = "#E5DCC8", color = NA),
        plot.background = element_rect(fill = "#E5DCC8"))

```



<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{r, echo = FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")
# print it out
pkg_sesh
```

</details>
