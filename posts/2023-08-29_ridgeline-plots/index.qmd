---
title: "Alternatives to box plots: Ridgeline plots"
description: | 
  Displaying trends of many species or groups at once can look unorganised, messy and crowded. Ridgeline plots offer a minimalist way to view data trends. Here, we present one example of how to view trends in seasonal observations of migratory bird species using {ggridges}.
author:
  - name: "Olivia Torresan"
  - name: "Dax Kellie"
date: "2023-05-16"
title-block-banner: "#B8573E"
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Animalia
  - Chordata
  - Aves
  - Summaries
image: tbd
draft: true
freeze: true
editor_options: 
  chunk_output_type: inline
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>


<!-- Author card -->

:::{.author-card}
:::{.author-card-text}

#### Author
[Olivia Torresan](https://labs.ala.org.au/about/Torresan_Olivia/)  
[Dax Kellie](https://labs.ala.org.au/about/Kellie_Dax/index.html)  

#### Date
5 May 2023

:::

:::{.row-b layout-ncol="3" style="margin-left: auto; margin-right: auto; margin-top: auto; margin-bottom: auto;"}

:::{.author-card-image style="width: auto; height: 120px; margin-right: auto !important;"}
<img src="https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/olivia.jpg" style="object-fit: cover; border-radius: 50% !important; width: 140px;"></img>

:::

:::{.author-card-image style="width: auto; height: 120px; margin-right: auto;"}
<img src="https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg" style="object-fit: cover; border-radius: 50% !important; width: 140px;"></img>

:::

:::
:::

<!------------------------ Post starts here ------------------------>


In ecology, it's common to try to view broad trends across individuals, populations, species or taxonomic groups. Although it's possible to use box plots and bar plots to do this, viewing many boxes or bars at once can become messy or crowded. These plots also display summary statistics that can mask variation and overexaggerate existing trends. 

Ridgeline plots are one useful, fast type of visualisation for showing trends in ecological data, like seasonality, diurnality, population growth or decline. They are especially useful for comparing a large number of individuals, species or groups because they display density curves, rather than summary statistics. This means that variation in the data is preserved.

Here, we use a ridgeline plot to quickly display the yearly seasonality of shorebirds (birds fond of tidal and estuary environments), in Pindanland, north Western Australia using the galah, ggplot2 and ggridges packages. 

Shorebirds tend to be highly migratory birds and move around the globe in search of food, or to breed. Their abundance in one given area generally fluctuates temporally. 


**after contemplation i personally think it looks better aside - it balances the text out a bit - but i dont understand why its leaving a massive white space. help would be appreciated sorry chef you can make the ultimate decision on placement** 

<aside>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/7/8/0/67245076-5f33-47e4-abe0-5f9e3e300872/original" class="rounded"/></img> 

Bar-tailed Godwit in WA by [loz88woz CC-BY-NC 4.0](https://biocache.ala.org.au/occurrences/357e5646-58f4-4336-96ed-cb2adb81eec9)

One species found in Pindanland is the Bar-tailed Godwit, *Limosa lapponica*. Once a year, it migrates to Australia for food across the Pacific for up to 11,000 kilometers non-stop. This is considered one of the longest continuous journeys by any bird in the world!

</aside>


Let's start by loading the R packages that we will need. 

```{r}
#| warning: FALSE
library(galah)
library(tidyverse)
library(ggridges)
library(pilot) #remotes::install_github("olihawkins/pilot")
```

We will use the [{galah} package](https://galah.ala.org.au) to download occurrence records from the [Atlas of Living Australia (ALA)](https://www.ala.org.au). To do this, you'll need to provide a registered email address and pass it to galah using `galah_config()`. 

```{r}
#| include: false
galah_config(email = "dax.kellie@csiro.au", atlas = "Australia", verbose = FALSE)
```

```{r}
#| eval: FALSE
galah_config(email = "your-email@email.com")
```

## Download data 

Our goal is to display the days of the year when shorebirds are observed. Let's download data of shorebirds: the order *Charadriiformes*. 

::: {layout-ncol="3" style="margin-left: auto; margin-right: auto;"}
<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/b/f/d/1/d6c6005f-fa29-4ad9-ae1c-334f74c11dfb/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/f/0/a/4/aa67a84d-130a-4b16-aecc-4671496e4a0f/original" class="rounded"/></img>

<img src="https://ala-images.s3.ap-southeast-2.amazonaws.com/store/b/9/0/7/1e6c5521-9816-4786-97b5-d96eb56c709b/original" class="rounded"/></img>
:::

::: figure-caption
Left: [*Xenus cinereus* (Ken Harris CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/5c83b20e-1ad4-4c7e-91fd-0b951f7063df), Middle: [*Stiltia isabella* (Steve Murray CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e7732077-891e-45b3-a284-9655ed53176e), Right: [*Cladorhynchus leucocephalus* (Blythe Nilson, iNaturalist CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/93a48a21-5c56-4955-82a7-3738884daf1e)
:::

We are interested in downloading data from Pindanland, a subregion of the [IBRA](https://www.dcceew.gov.au/environment/land/nrs/science/ibra) bioregion *Dampierland*. To filter our data to only Pindanland, we'll do a text search for any fields in galah that contain IBRA information.

```{r}
search_all(fields, "ibra")
```

<aside>

For those unfamiliar with Australian geography, Pindanland is located here. This map also shows other [IBRA](https://www.dcceew.gov.au/environment/land/nrs/science/ibra) sub-bioregions.  


```{r}
#| echo: false
#| message: false
library(ozmaps)

# read in IBRA shapefile
ibra_shp <- sf::st_read(here::here("posts",
                         "data",
                         "IBRA7_subregions",
                         "ibra7_subregions.shp"),
                    quiet = TRUE) |>  
  sf::st_transform(crs = sf::st_crs("WGS84")) |>
  rmapshaper::ms_simplify(keep = 0.1)

Pindanland <- ibra_shp |>
  filter(SUB_NAME_7 == "Pindanland") |>
  sf::st_transform(crs = sf::st_crs("WGS84"))

# create the start and end points of the label arrow

arrows <- tibble(
  x1 = 119.813640,   # starting x-coordinate
  x2 = 121,          # ending x-coordinate
  y1 = -16,   # starting y-coordinate
  y2 = -18           # snding y-coordinate
)

ibra_highlightplot <-
  ggplot() +
  geom_sf(data = ibra_shp,
          fill = "transparent",
          colour = "grey90") +
  geom_sf(data = ozmap_country,
          fill = "transparent",
          colour = "grey40") +
  geom_sf(data = Pindanland, 
          fill = "#E06E53",
          colour = "#E06E53") +
  xlab("Longitude") +
  ylab("Latitude") +
  xlim(c(112, 156)) + # Set limits for x-axis
  ylim(c(-44, -10)) +
  geom_curve( # Set limits for y-axis
    data = arrows, 
    aes(x = x1, y = y1, xend = x2, yend = y2),
    arrow = arrow(length = unit(0.08, "inch")),
    linewidth = 1.5,
    color = "gray10",
    curvature = -0.3
  ) +
  annotate("text", x = 115, y = -16, label = "Pindanland", size = 5.2) +
  theme_void()

ibra_highlightplot
```

</aside>


The field ID `cl1049` appears to contain IBRA subregions. Let's show what values are recorded in the IBRA 7 Subregions field.


```{r}
search_all(fields, "cl1049") |> show_values()
```

We can also search for "Pindanland" to double check for our subregion.

```{r}
search_all(fields, "cl1049") |> 
  search_values("Pindanland")
```

Now we can download occurrence data of *Charadriiformes* (shorebirds) in Pindanland by using field `cl1049` in our query. We further filter our query to return occurrences recorded after the year 2000, human observations (rather than museum specimens), and records identified to the species level. We'll also use a set of ALA data cleaning filters (i.e. a data *profile*) by adding `galah_apply_profile(ALA)` to return fewer erroneous records. To shrink the amount of data we return, we'll select to only return columns `eventDate`, `scientificName`. 

```{r}
#| message: false
#| warning: false
#| verbose: false
# download shorebird records
shorebirds <- galah_call() |>
  galah_identify("Charadriiformes") |> 
  galah_filter(cl1049 == "Pindanland",
               year > 2000,
               basisOfRecord == "HUMAN_OBSERVATION",
               taxonRank == "species") |>
  galah_apply_profile(ALA) |>
  galah_select(eventDate, scientificName) |>
  atlas_occurrences()
shorebirds
```

Now we have our data, we need to prepare it for our plot. Remember that we are trying to visualise the total number of observations for every species for each aggregated day of the year.

To clean our data, we'll remove records missing an `eventDate`. Then we can convert `eventDate` to a standard date class (yyyy/mm/dd) so it is recognised by gpplot2, and extract the day of the year (Julian date). [^1]: Thanks to leap years, our Julian dates wont be perfectly summarised to the day. If you're planning to analyse something at a very fine temporal scale, you should consider this. 


```{r}
# format date
shorebirds_cleaned <- shorebirds |>
  drop_na(eventDate) |>
  mutate(
    eventDate = as_date(eventDate),
    date_julian = yday(eventDate)
  )

shorebirds_cleaned
```

We then filter our data to only include species with more than 10 occurrence records.  

```{r}
shorebirds_filtered <- shorebirds_cleaned |>
  group_by(scientificName) |>
  filter(n_distinct(date_julian) >= 10)

shorebirds_filtered |> rmarkdown::paged_table()
```

Using `ggplot2` and `ggridges`, we can now create a ridgeline plot for our data.


```{r}
#| warning: false
#| fig-height: 6
#| fig-width: 10
#| column: body-outset
#| fig-align: center
#| out-extra: "style=margin-left:auto;margin-right:auto;"
ridge_plot <- ggplot(
  data = shorebirds_filtered,
  aes(x = date_julian,
      y = scientificName,
      fill = scientificName)) +  
  ggridges::geom_density_ridges(color = NA) +  
  pilot::scale_fill_pilot() +
  theme_minimal() +
  theme(legend.position = "none")

ridge_plot

```

If you want to, there are also some extra ways you can increase the readability and aesthetic of your ridgeline plot. For example, we can order the species by their relative median or middle value. This will make the ridges that are flatter appear at the bottom and those with a prominent cluster at the top. This is helpful as ridges overlap, and it may be hard to see flatter ridges underneath big clusters when randomly ordered. You may also want to simplify the Julian dates on the x axis to be labelled against months of the year. 


```{r}
# format date, extract month
shorebirds_cleaned <- shorebirds |>
  drop_na(eventDate) |>
  mutate(
    eventDate = as_date(eventDate),
    month = month(eventDate, abbr = TRUE, label = TRUE), # add a column for month here
    date_julian = yday(eventDate)) 
```


```{r}
#| warning: false
#| code-fold: true
#| fig-height: 10
#| fig-width: 15
#| column: page
#| fig-align: center
#| fig-cap: "Total daily observations of shorebirds from 2000–2024 in Pindanland, WA"
#| out-extra: "style=margin-left:auto;margin-right:auto;"

shorebirdplot <- ggplot(
  data = shorebirds_filtered,
  aes(
    x = date_julian,
    y = fct_reorder(scientificName, date_julian, .fun = median),
    fill = fct_reorder(scientificName, date_julian, .fun = median), 
    colour = fct_reorder(scientificName, date_julian, .fun = median),
  )) +
  scale_x_continuous(
    breaks = c(1, 61, 121, 181, 241, 301, 361),  # set numbers for labels every two months including December
    labels = c("Jan", "Mar", "May", "Jul", "Sep", "Nov", "Dec"),  # add labels
    expand = c(0,0)) + 
  labs(x = "Month") +
  ggridges::geom_density_ridges(color = NA,
    scale = 3,          # adjust the scale to widen the ridges
    height = 0.05,      # adjust the height to increase space between ridges
    alpha = .8,
    rel_min_height = 0.02) +
  pilot::theme_pilot( # use the oli hawkins pilot package for colour palette
    grid = "v", # maintain only the vertical lines from the backing grid 
    axes = "") + # remove axis lines for a cleaner appearance
  pilot::scale_fill_pilot() +
  theme(legend.position = "none",
        axis.title.y = element_blank())
shorebirdplot
```

## Final thoughts 

And that's it! Ridgelines are a simple and fast visualisation to use, and are a beautiful way to visualise trends in ecological data. 

As always, keep in mind that ridgeline plots might not be the best plot to use for your data or to initially inspect it. Because they emphasise the shape of the data distribution and do not separate individual points, they are useful to present broader trends, but not necessarily to assess detailed or finer scale components of your data. Be wary of potential outliers or suspicious records in your data and make sure to consider them in the cleaning process before plotting. You might find it useful to assess your data in a [beeswarm or raincloud plot](https://labs.ala.org.au/posts/2023-08-28_alternatives-to-box-plots/) first to assess for any outliers. As mentioned above be cautious of the ordering of your data and the level at which your ridges overlap so that it is not masking any other data underneath. 

Because it is aesthetically pleasing to use a lot of colours in these plots as well, it is important to consider that they can be easily inaccessible to colour-blind people. The [pilot](https://github.com/olihawkins/pilot) package we used here uses a colour-blind friendly palette. There are also other packages out there dedicated to generating colour-blind friendly palettes (or have in-built options) for this that are worth exploring. 

<details><summary style = "color: #E06E53;">Expand for session info</summary>

```{r, echo = FALSE}
#| warning: false
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")
# print it out
pkg_sesh
```

</details>
