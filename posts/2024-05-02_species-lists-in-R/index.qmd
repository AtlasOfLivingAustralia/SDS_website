---
title: "Download a species list and cross-reference with conservation status lists in R"
description: |
  Knowing what species have been observed in a local area is a regular task for ecosystem management. Here we show how to make a species list with galah and how to cross-reference this list with threatened and sensitive species lists. We then show how to visualise this information as a waffle chart using {waffle} & {ggplot2}.
author:
  - name: "Dax Kellie"
  - name: "Amanda Buyan"
date: "2024-05-02"
title-block-banner: "#B8573E"
toc: true
toc-location: left
toc-depth: 2
categories:
  - Eukaryota
  - Animalia
  - Plantae
  - Summaries
  - R
image: waffle-chart.png
freeze: true
draft: true
editor_options: 
  chunk_output_type: console
---

```{r}
#| include: false
library(htmltools)
```

<!-- remove metadata section -->

```{=html}
<style>
  #title-block-header.quarto-title-block.default .quarto-title-meta {
      display: none;
  }
</style>
```
<!-- Author card -->

::: author-card
::: author-card-text
#### Author

[Dax Kellie](https://labs.ala.org.au/about/Kellie_Dax/)\
[Amanda Buyan](https://labs.ala.org.au/about/Buyan_Amanda/)

#### Date

2 May 2024
:::

::: author-card-image
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg")
```
:::

::: author-card-image
```{r, out.width='120px', out.extra='style="clip-path: circle();"', echo=FALSE}
knitr::include_graphics("https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg")
```
:::
:::

<!------------------------ Post starts here ------------------------>

Knowing what species inhabit an area is important for conservation and ecosystem management. In particular, it can help us find out how many known species are in a given area, whether each species is common or rare, and whether any species are threatened or endangered.

In this post, we will use the [galah](https://galah.ala.org.au/R/), [waffle](https://github.com/hrbrmstr/waffle) and [ggplot2](https://ggplot2.tidyverse.org/) packages to show you how to download a list of species within the Yass Valley in 2023, cross-reference this list with state-wide conservation status lists, and visualise the number of threatened and sensitive species in the region. 

::: aside

For those unfamiliar with Australian geography, Yass Valley is located here:

```{r}
#| echo: false
#| warning: false
#| message: false
library(ozmaps)
library(dplyr)
library(sf)
library(ggplot2)

lga_wgs84 <- ozmap_data(data = "abs_lga") |> 
  sf::st_transform(4326)

yass_wgs84 <- ozmap_data(data = "abs_lga") |>
  dplyr::filter(stringr::str_detect(NAME, "Yass")) |>
  sf::st_transform(4326)

#create the start and end points of the label arrow
arrows <- 
  tibble(
    x1 = c(154),
    x2 = c(149),
    y1 = c(-40),
    y2 = c(-36))

map_highlight <- ggplot() + 
  geom_sf(data = lga_wgs84,
          fill = "white",
          colour = "grey90") +
  geom_sf(data = yass_wgs84, 
          fill = "#E06E53",
          colour = "#E06E53")

map_highlight + 
  theme_void() + 
  geom_curve(
    data = arrows, aes(x = x1, y = y1, xend = x2, yend = y2),
    arrow = arrow(length = unit(0.08, "inch")), 
    linewidth = 1.5,
    color = "gray10", 
    curvature = -0.3) + 
  annotate("text", x = 157, y = -41, label = "Yass Valley", size = 10) 
```

:::

# Download a list of species

There are two ways to narrow a download query to return information for a specific region:  

  * Using fields available in galah (downloaded from the ALA)
  * Using a shapefile
  
The method you choose depends on whether the region you wish to return species for is already within galah, or whether you require a list for a more specific area defined by a shapefile.

First let's load our packages.

```{r}
#| warning: false
#| message: false
library(dplyr)
library(ggplot2)
library(readr)
library(sf)
library(rmapshaper)
library(here)
library(galah)
```

To download species lists, you will also need to enter a registered email with the ALA using `galah_config()`.

```{r}
#| eval: false
galah_config(email = "your-email-here")
```

```{r}
#| echo: false
galah_config(email = "dax.kellie@csiro.au", verbose = FALSE)
```


::: {.panel-tabset .nav-pills}

# Fields in galah

## Search for fields in galah

To find which fields and layers exist within galah to help us narrow our query, we can use the `search_all()` function. Let's do a text search to find what fields contain information on "Local Government Areas".

```{r}
search_all(fields, "Local Government Areas")
```

The field `cl10923`[^1] appears to contain the most recent data (from 2018). We can preview what values are *within* the field `cl10923` using `show_values()`.

```{r}
search_all(fields, "cl10923") |>
  show_values()
```

There are lots of Local Government Areas! To check that Yass Valley is included, we can do a text search for values that match "YASS VALLEY".

[^1]: Each spatial layer has a two letter code, along with a number to identify it. The abbreviations are as follows:
  * `cl` = contextual layer (i.e. boundaries of LGAs, Indigenous Protected Areas, States/Territories etc.)  
  * `10923` = number associated with the spatial layer in the atlas

```{r}
search_all(fields, "cl10923") |>
  search_values("YASS VALLEY")
```


## Download data

Using the `field` and `category` returned above, we can now build our query. We begin our query with `galah_call()` and filter our query to only Yass Valley in the year 2023. We then specify we wish to return a species list by ending our query with `atlas_species()`. 

```{r}
species_yass <- galah_call() |>
  filter(cl10923 == "YASS VALLEY COUNCIL",
         year == 2023) |>
  atlas_species()

species_yass
```

It's also possible to group by each species and return the observations counts by ending our query with `atlas_counts()`.

```{r}
species_counts <- galah_call() |>
  filter(cl10923 == "YASS VALLEY COUNCIL",
         year == 2023) |>
  group_by(species) |>
  atlas_counts()

species_counts
```


# External shapefile

## Download shapefile

To retrieve the spatial outline of Yass Valley, let's download the latest Local Government Areas data from the [Australian Bureau of Statistics Digital Boundary files page](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files). Find "Local Government Areas - 2023 - Shapefile" and click "Download ZIP". Save the zip folder in your current directory and unzip it.

Let's read the file into R. We will also simplify the shapefile[^simplify] using `ms_simplify()` from the [rmapshaper package](https://andyteucher.ca/rmapshaper/) because complex shapefiles can sometimes cause problems with sending queries to the ALA.

[^simplify]: Simplifying a shapefile removes the number of total points that draw the shape outline.

```{r}
#| eval: false
lga <- sf::st_read(here("LGA_2023_AUST_GDA2020.shp")) |>
  rmapshaper::ms_simplify(keep = 0.01)
lga
```

```{r}
#| warning: false
#| message: false
#| echo: false
lga <- sf::st_read(here("posts",
                        "data",
                        "LGA_2023",
                        "LGA_2023_AUST_GDA2020.shp"),
                   quiet = TRUE) |>
  rmapshaper::ms_simplify(keep = 0.01)
lga
```


Now let's transform the Coordinate Reference System (CRS) of our shapefile to [EPSG](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset):4326 (the standard used in cartography and GPS, also known as [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System)) so that it matches the projection of our data from the ALA [^2]. 

[^2]: Check out [this post](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/post.html#make-a-map) for a better explanation of what CRS is and how it affects maps.

```{r}
lga <- lga |>
  st_transform(crs = 4326)
```

Next we can filter our shapefile to only Yass Valley. The column `LGA_NAME23` contains area names, and we can filter our data frame to only rows where `LGA_NAME23` is equal to `Yass Valley`. We are left with a single polygon shape of Yass Valley.

```{r}
yass_valley <- lga |>
  filter(LGA_NAME23 == "Yass Valley")

yass_valley
```

## Download data

Now that `yass_valley` contains our LGA shape, we can build our query. Once again, we'll begin our query with `galah_call()` and filter to only records from 2023. We can also specify we want records within our `yass_valley` shapefile with `galah_geolocate()`. We then specify we wish to return a species list by ending our query with `atlas_species()`.

```{r}
species_yass <- galah_call() |>
  filter(year == 2023) |>
  galah_geolocate(yass_valley) |>
  atlas_species()

species_yass
```

It's also possible to group by each species and return the observations counts by ending our query with `atlas_counts()`.

```{r}
species_counts <- galah_call() |>
  filter(year == 2023) |>
  galah_geolocate(yass_valley) |>
  group_by(species) |>
  atlas_counts()

species_counts
```

:::

# Cross-reference with threatened and sensitive species lists

Next we will compare our Yass valley species list with several state-wide conservation status lists of threatened and sensitive species. We can retrieve lists of threatened and sensitive species in one of two ways: <br>

  - Use the lists available in the Atlas of Living Australia<br>
  - Use your own list

Both use the same method of matching species names in our Yass Valley list to species names in official conservation status lists. However, there is a slightly different workflow between using galah and using an externally downloaded list. Choose from the options below to use either method.

::: {.panel-tabset .nav-pills}

# Using lists in the ALA

We can use galah to access lists that are available on the Atlas of Living Australia to compare to our Yass Valley species list. 

Yass Valley is within the state of New South Wales, so let's do a text search for "New South Wales" to see what state-specific lists are available.

```{r}
search_all(lists, "New South Wales")
```

Two lists are returned, and both appear relevant. With the help of some additional columns returned by `search_all()`—`listType`, `isAuthoritative` and `isThreatened`—we can learn more about which list suits our needs best. Although both lists are authoritative, only one list (`dr650`) contains threatened species whereas the other `dr487` contains sensitive species. 

```{r}
search_all(lists, "New South Wales") |>
  select(species_list_uid, listType, isAuthoritative, isThreatened)
```

We can return only species in Yass Valley on the New South Wales Conservation Status List (`dr650`) by filtering to `species_list_uid == dr650`. Our query returns 22 species.

```{r}
yass_threatened <- galah_call() |>
  galah_filter(species_list_uid == dr650,
               year == 2023) |>
  galah_geolocate(yass_valley) |>
  atlas_species()

yass_threatened
```

We can do the same using the New South Wales Sensitive Species (`dr487`). Our query returns 3 species.

```{r}
yass_sensitive <- galah_call() |>
  galah_filter(species_list_uid == dr487,
               year == 2023) |>
  galah_geolocate(yass_valley) |>
  atlas_species()

yass_sensitive
```

To return the count of species records, we can group by `species` and end our query with `atlas_counts()`

```{r}
yass_sensitive_counts <- galah_call() |>
  galah_filter(species_list_uid == dr487,
               year == 2023) |>
  galah_geolocate(yass_valley) |>
  galah_group_by(species) |>
  atlas_counts()

yass_sensitive_counts
```


# Using external lists

We can use our own conservation status lists from an external source to compare to our Yass Valley species list. 

As an example, we are using the the New South Wales Conservation Status List and the New South Wales Sensitive Species List[^3].

{{< downloadthis ../data/example_TSL.csv label="Download Conservation Status List" icon=database-fill-down type=info class=data-button >}} {{< downloadthis ../data/example_SSL.csv label="Download Sensitive Species List" icon=database-fill-down type=info class=data-button >}}

[^3]: These are the same two lists that you can access in galah, available from the Atlas of Living Australia. Keep in mind that if you use an external list, data cleaning may be required before matching species names.

First, let's read in both lists and see what each list looks like.

```{r}
#| eval: false
threatened_list <- read_csv(here("path", "to", "example_TSL.csv"))
sensitive_list <- read_csv(here("path", "to", "example_SSL.csv"))
```

```{r}
#| echo: false
#| warning: false
#| message: false
threatened_list <- read_csv(here("posts", "data", "example_TSL.csv"))
sensitive_list <- read_csv(here("posts", "data", "example_SSL.csv"))
```


Let's filter our Yass Valley species to only those that are also in our `threatened_list`. We return 23 species.

```{r}
yass_threatened <- species_yass |>
  filter(species_name %in% yass_threatened$species_name)

yass_threatened
```

We can do the same with our `sensitive_list`, which returns 3 species.

```{r}
yass_sensitive <- species_yass |>
  filter(species_name %in% yass_sensitive$species_name)

yass_sensitive
```

:::

# Visualise species conservation status

One useful way to visualise the number of threatened and sensitive species in an area is using a waffle chart. Waffle charts are useful because they can show the total number of species (represented as individual square units) and proportions of different groups (represented by colours). 

For example, we can visualse the number and proportion of species with different conservation status, along with a taxonomic breakdown of threatened/sensitive species.

```{r}
#| code-fold: true
#| warning: false
#| message: false
library(waffle)
library(showtext)
library(glue)

# Add conservation status & taxa groups plotting
species_yass_grouped <- species_yass |>
  mutate(
    conservation_status = case_when(
      species_name %in% yass_sensitive$species_name ~ "Sensitive",
      species_name %in% yass_threatened$species_name ~ "Threatened",
      .default = "No status"
    ),
    taxa_group = case_when(
      class == "Aves" ~ "Birds",
      class == "Reptilia" ~ "Reptiles",
      class == "Mammalia" ~ "Mammals",
      kingdom == "Plantae" ~ "Plants",
      .default = "Other"
    )
  )

# Count number of species by conservation status
status_table <- species_yass_grouped |>
  group_by(conservation_status) |>
  summarise(n = n()) |>
  mutate(proportion = n/sum(n)*100)

# Count number of species by taxonomic group
taxa_table <- species_yass_grouped |>
  filter(conservation_status %in% c("Sensitive", "Threatened")) |>
  group_by(taxa_group) |>
  summarise(n = n()) |>
  mutate(proportion = n/sum(n)*100)

# Extract percentage that are threatened/sensitive species
prop_threatened_or_sensitive <- status_table |>
  filter(conservation_status %in% c("Sensitive", "Threatened")) |>
  summarise(total = sum(proportion)) |>
  pull(total) |>
  round(2)

# Add nicer font
font_add_google("Roboto", "roboto")
showtext_auto()

# Plot 1 Waffle: Conservation Status
waffle_status <- 
  ggplot(status_table) +
  waffle::geom_waffle(aes(fill = conservation_status,
                          colour = conservation_status,
                          values = n),
                      n_rows = 21,
                      height = 0.75,
                      width = 0.75,
                      size = 1) +
  scale_colour_manual(name = "Conservation\nStatus",
                    values = c("#F3E6DC", "#D89A98", "#AB423F"),
                    labels = c("No status", "Sensitive", "Threatened")) +
  scale_fill_manual(name = "Conservation\nStatus",
                    values = c("#F3E6DC", "#D89A98", "#AB423F"),
                    labels = c("No status", "Sensitive", "Threatened")) +
  labs(title = glue::glue("{prop_threatened_or_sensitive}% of total species in \\
                          Yass Valley are threatened or sensitive"),
       caption = "1 square = 1 species") +
  coord_equal() + 
  theme_void() + 
  theme(legend.position = "bottom",
        text = element_text(family = "roboto", lineheight = 0.5),
        legend.title = element_text(hjust = 0.5, size = 20),
        legend.text = element_text(size = 19),
        plot.title = element_text(hjust = 0.5, size = 25),
        plot.caption = element_text(size = 17),
        plot.margin = margin(0.5, 1, 0.5, 1, unit = "cm"))

# Plot 2: Taxonomic breakdown
waffle_taxa <- 
  ggplot(taxa_table) +
  waffle::geom_waffle(aes(fill = taxa_group,
                          colour = taxa_group,
                          values = n),
                      n_rows = 5,
                      height = 0.75,
                      width = 0.75,
                      size = 1) +
  scale_colour_manual(name = "Group",
                    values = c("#567C7C", "#6D714A", "#465743", "#22352C", "#C4AC79"),
                    labels = c("Birds", "Mammals", "Other", "Plants", "Reptiles")) +
  scale_fill_manual(name = "Group",
                    values = c("#567C7C", "#6D714A", "#465743", "#22352C", "#C4AC79"),
                    labels = c("Birds", "Mammals", "Other", "Plants", "Reptiles")) +
  labs(title = "Taxonomic breakdown of threatened & sensitive species",
       caption = "1 square = 1 species") +
  coord_equal() + 
  theme_void() + 
  theme(legend.position = "bottom",
        text = element_text(family = "roboto"),
        legend.title = element_text(hjust = 0.5, size = 20),
        legend.text = element_text(size = 19),
        plot.title = element_text(hjust = 0.5, size = 25),
        plot.caption = element_text(size = 17, hjust = 1),
        plot.margin = margin(0.5, 2.5, 0.5, 2.5, unit = "cm"))
```


```{r}
#| echo: false
#| warning: false
#| message: false
#| column: page
#| fig-align: center
#| fig-width: 12
#| out-extra: "style=margin-left:auto;margin-right:auto;"
waffle_status
```

```{r}
#| echo: false
#| warning: false
#| message: false
waffle_taxa
```


# Final thoughts

We hope this post has helped you understand how to download a species list for a specific area and compare it to conservation lists. It's also possible to compare species with other information like lists of migratory species or seasonal species.

For other posts, check out [our beginner's guide to map species observations](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/index.html) or see [an investigation of dingo observations in the ALA](https://labs.ala.org.au/posts/2023-05-16_dingoes/).

<details>

<summary style="color: #E06E53;">

Expand for session info

</summary>

```{r, echo = FALSE}
library(sessioninfo)
# save the session info as an object
pkg_sesh <- session_info(pkgs = "attached")
# print it out
pkg_sesh
```

</details>



