{
  "hash": "d0645c06b7b4bf9d5198940b9723c4da",
  "result": {
    "markdown": "---\ntitle: \"Make a map of species observations in under 5 minutes\"\ndescription: |\n  The ability to make a map quickly is an essential skill in ecology and conservation. This post shows how to make a quick, simple map of Peron's tree frog occurrences using `galah-python`, `geopandas` & `matplotlib`.\nauthor:\n  - name: \"Amanda Buyan\"\n  - name: \"Dax Kellie\"\ndate: \"2023-11-23\"\ntitle-block-banner: \"#B8573E\"\ninclude-after-body: _footer.html\ntoc: true\ntoc-location: left\ntoc-depth: 2\ncategories:\n  - Eukaryota\n  - Animalia\n  - Chordata\n  - Anura\n  - Maps\nimage: tbd\ndraft: true\nfreeze: true\nengine: knitr\njupyter: python3\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n<!-- remove metadata section -->\n<style>\n  #title-block-header.quarto-title-block.default .quarto-title-meta {\n      display: none;\n  }\n</style>\n\n\n\n<!-- Author card -->\n\n:::{.author-card}\n:::{.author-card-text}\n\n#### Author\n[Amanda Buyan](https://labs.ala.org.au/people/Buyan_Amanda/index.html)  \n[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  \n\n#### Date\n23 November 2023\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::\n\n<!------------------------ Post starts here ------------------------>\n\nMaps are one of the most common and useful data visualisation tools in an ecologist's tool belt. Making a quick and simple map of species observations is especially useful when first investigating where a species has occurred. Viewing locations of points helps to understand the extent of your data (and spot possible errors or outliers). \n\nIn this post, we will use Python to make a map in under 5 minutes of Peron's tree frog (*Litoria peronii*) observations in New South Wales, Australia recorded by FrogID since 2018 using the `galah_python`, `geopandas` and `matplotlib` packages.  \n\n## Download data\n\nPeron's Tree frog is one of the most recorded frog species in the Atlas of Living Australia. Growing up to 7cm in length, it is well-known for its eyes which often look like they have a black cross on them!\n\n::: {layout-ncol=\"3\" style=\"margin-left: auto; margin-right: auto;\"}\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/8/e/f/0/b32e7003-0ab0-4d8d-95af-b8ea4e730fe8/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/2/6/4/2/201f6e7f-9a28-4acd-8ac8-f089f6fb2462/original\" class=\"rounded\"/></img>\n\n<img src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/b/7/4/41d58826-abce-4647-8c25-335f145647b1/original\" class=\"rounded\"/></img>\n:::\n\n::: figure-caption\nLeft: [*Litoria peronii* (Giverny CC-BY-NC 4.0 (Int)](https://biocache.ala.org.au/occurrences/4d4a1b5d-f70f-4286-9282-3c325cdf2646), Middle: [*Litoria peronii* (debtaylor142 CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/ed5f63f8-be87-41e0-9382-894c3fc45eda), Right: [*Litoria peronii* (Ernst Weiher, iNaturalist CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/e0cd9d37-c994-40f3-95dd-d5da09b12b67)\n:::\n\nFirst, let's import `galah-python`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nimport galah\n```\n:::\n\n\nTo run a command asking `galah-python` to tell you the total number of records the Atlas of Living Australia has, use `atlas_counts`.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.atlas_counts()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   totalRecords\n0     132243624\n```\n:::\n:::\n\n\nWe can then narrow down the number of record counts by providing one or more of the following:\n\n- Species scientific name(s)\n- Filters\n\nTo find species' scientific names, we suggest using the `search_taxa()` function of `galah-python` or by doing a Google search of your favourite species.  To find other ways to narrow your query, you can use the `galah.show_all()` command, which will show you all possible fields to narrow search.  However, if you want to search for a particular string of text in a field, use the `galah.search_all()` function.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.search_all(fields=\"year\")\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n                    id                                        description   type                                               link\n0                 year  The year in which an occurrence was observed. ...  field  https://github.com/AtlasOfLivingAustralia/ala-...\n1         endDayOfYear          http://rs.tdwg.org/dwc/terms/endDayOfYear  field                                                NaN\n2        datePrecision  The precision of the date information for the ...  field                                                NaN\n3       occurrenceYear  Year ranges for a search. Calculated based on ...  field                                                NaN\n4       startDayOfYear        http://rs.tdwg.org/dwc/terms/startDayOfYear  field                                                NaN\n5  namePublishedInYear   http://rs.tdwg.org/dwc/terms/namePublishedInYear  field                                                NaN\n```\n:::\n:::\n\n\nIf we were to choose `year` as our filter, the other things we need to do is to find what value we want to filter by.  To find all possible values of `year`, use the `show_values()` function.  To search for specific values, use the `search_values()` function.\n\nLet's map the locations of Peron's tree frog since 2018 in New South Wales by FrogID.  First, we will find how many records there are of Peron's tree frog that match our query. It's good practice check how many observations there are of a given species so you know how many to expect when you download them! \n\nWe'll use `atlas_counts()` to download record counts, specifying the taxon we want using the `taxa` argument, and narrowing the year range, state/territory and data resource using the `filters` argument.\n\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.atlas_counts(                      # *Download record counts*\n    taxa=\"litoria peronii\",              # *of Peron's tree frog*\n    filters=[\"year>=2018\",               # *since 2018*\n             \"cl22=New South Wales\",     # *in New South Wales*\n             \"dataResourceName=FrogID\"]  # *by FrogID*\n)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   totalRecords\n0         27647\n```\n:::\n:::\n\n\n<aside>\nFor a step-by-step explanation on how to form this query in Python, visit [this galah-python workhop episode](https://atlasoflivingaustralia.github.io/galah-python-workshop/02-Building-An-Example-Query/index.html).\n</aside>\n\nNow we can use `atlas_occurrences()` to download occurrence records!\n\nYou will need to first provide a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) using `galah_config()` before retrieving records.\n\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.python .cell-code}\ngalah.galah_config(email = \"your-email-here\")\nfrogs = galah.atlas_occurrences(\n    taxa=\"litoria peronii\",\n    filters=[\"year>=2018\",\n             \"cl22=New South Wales\",\n             \"dataResourceName=FrogID\"]\n)\nfrogs\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n       decimalLatitude  decimalLongitude             eventDate   scientificName                                     taxonConceptID                              recordID dataResourceName occurrenceStatus\n0           -37.246800        149.375000  2020-12-27T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  a5cd2fcd-5225-4d19-977c-b16ca5e8f1dd           FrogID          PRESENT\n1           -37.089036        149.699526  2020-12-14T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  eebde5ef-cac4-4897-af00-cb2e39a0684f           FrogID          PRESENT\n2           -37.077693        149.874402  2018-01-06T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  35340478-97c1-48a4-a463-991fe3a8daa0           FrogID          PRESENT\n3           -37.077241        149.874787  2018-01-06T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  a7abc9f3-362f-469e-9076-5b55a2447b69           FrogID          PRESENT\n4           -37.070746        149.896011  2020-12-13T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  1cc9dda8-f2d4-4f55-acf6-11c93b26da9e           FrogID          PRESENT\n...                ...               ...                   ...              ...                                                ...                                   ...              ...              ...\n27642       -28.207514        153.442592  2018-11-15T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  b094fed1-5bff-4df8-b556-cabd693c533a           FrogID          PRESENT\n27643       -28.207472        153.442497  2018-11-15T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  5cc24fbd-8c6b-4a76-9b28-fec76ee08f37           FrogID          PRESENT\n27644       -28.207442        153.442328  2020-02-07T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  61aa50a1-4c79-4fc3-b3ab-93538faa37b1           FrogID          PRESENT\n27645       -28.207108        153.443021  2021-02-19T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  0324b8d1-77b0-4bf3-9ec2-6ad9efff18f2           FrogID          PRESENT\n27646       -28.186157        153.445556  2018-11-16T00:00:00Z  Litoria peronii  https://biodiversity.org.au/afd/taxa/c584f24b-...  bcf83a54-a900-4265-960a-9436356a7107           FrogID          PRESENT\n\n[27647 rows x 8 columns]\n```\n:::\n:::\n\n\nAs we can see, we get 8 columns by default from the ALA; to make our map,however, we only need `scientificName`,`decimalLatitude`, and `decimalLongitude` columns.\n\n# Make a map\n\nIt's time to make our map!  \n\nIn order to draw our map of New South Wales, we'll download a shapefile of the latest state and territory boundaries from the Australian Bureau of statistics (link [here](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files)). Download the \"States and Territories - 2021 - Shapefile\" zip file, and save the zip file in the same folder you are coding in.\n\nLet's load our States and Territories shapefile with `read_file()` and save it as `states`.  Then, we will choose the part of the shape that represents New South Wales.  We will also specify that the edges of the shape are black, the inside of the shape is white, and the figure size is in inches, the default unit for matplotlib.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nfrom matplotlib import pyplot as plt\nimport geopandas as gpd\n\n# Load Australian state and territory boundaries\nstates = gpd.read_file(\"STE_2021_AUST_GDA94.shp\")\n\n# Filter to New South Wales and plot\nstates[states[\"STE_NAME21\"] == \"New South Wales\"].plot(edgecolor = \"#5A5A5A\", linewidth = 0.5, facecolor = \"white\", figsize = (12,6))\n```\n\n::: {.cell-output-display}\n![](Make_A_Map_files/figure-html/unnamed-chunk-12-1.png){width=1152}\n:::\n:::\n\n\nWe will also set the Coordinate References System (CRS), which determines how our points on the spherical globe are oriented when drawn as a flat surface. The projection of ALA data is EPSG:4326 (also known as \"WGS84\"). Setting the CRS allows us to make sure the points of our data align correctly with our shapefile.\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstates = states.to_crs(4326)\n```\n:::\n\n\nNow, we will add our species data to the map.  First, we will plot our reprojected shapefile.  Then, we will overlay a scatter plot using `decimalLongitude` as your x axis and `decimalLatitude` as your y axis.  `c` represents the colour for the scatterplot points, and alpha is how transparent the points are (`1` is no transparency, `0` is fully transparent).\n\n\n::: {.cell}\n\n```{.python .cell-code}\nstates[states[\"STE_NAME21\"] == \"New South Wales\"].plot(edgecolor = \"#5A5A5A\", linewidth = 0.5, facecolor = \"white\", figsize = (12,6))\nplt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = \"#6fab3f\", alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](Make_A_Map_files/figure-html/unnamed-chunk-14-3.png){width=1152}\n:::\n:::\n\n\nFor some final touches (to make the map prettier), we can add labels, titles and legends, as well as save the figure.\n\n\n::: {.cell .column-screen-inset layout-align=\"center\"}\n\n```{.python .cell-code}\nstates[states[\"STE_NAME21\"] == \"New South Wales\"].plot(edgecolor = \"#5A5A5A\", linewidth = 0.5, facecolor = \"white\", figsize = (12,6))\nplt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = \"#6fab3f\", alpha = 0.5, label = \"Litoria peronii\")\nplt.legend()\nplt.xlabel(\"Longitude\",fontsize=16)\nplt.ylabel(\"Latitude\",fontsize=16)\nplt.title(\"Peron's tree frog\\nFrogID observations in New South Wales since 2018\",fontsize=20)\n```\n\n::: {.cell-output-display}\n![](Make_A_Map_files/figure-html/unnamed-chunk-15-5.png){fig-align='center' width=1152}\n:::\n:::\n\n\nTo save your plot in your current folder, you can use:\n\n\n::: {.cell}\n\n```{.python .cell-code}\nplt.savefig(\"perons_tree_frog_nsw.png\")\n```\n:::\n\n::: {.cell}\n\n```{.python .cell-code  code-fold=\"true\"}\nimport galah\nfrom matplotlib import pyplot as plt\nimport geopandas as gpd\n\n# Load Australian state and territory boundaries\nstates = gpd.read_file(\"STE_2021_AUST_GDA94.shp\")\n\n# Filter to New South Wales\nstates[states[\"STE_NAME21\"] == \"New South Wales\"].plot(edgecolor = \"#5A5A5A\", linewidth = 0.5, facecolor = \"white\", figsize = (12,6))\n\n# Change your Coordinate Reference System to the same as the ALA CRS\nstates = states.to_crs(4326)\n\n# Plot your shape file\nax = states[states[\"STE_NAME21\"] == \"New South Wales\"].plot(edgecolor = \"#5A5A5A\", linewidth = 0.5, facecolor = \"white\", figsize = (12,6))\n\n# Plot your species points over the shape file\nplt.scatter(frogs['decimalLongitude'],frogs['decimalLatitude'], c = \"#6fab3f\", alpha = 0.5)\n\n# add a legend to show what species you are plotting\nplt.legend()\n\n# set X and Y label so users know they are looking at degrees latitude and longitude\nax.set_xlabel(\"Longitude\",fontsize=16)\nax.set_ylabel(\"Latitude\",fontsize=16)\n\n# add a title to your plot\nplt.title(\"Peron's tree frog\\nFrogID observations in New South Wales since 2018\",fontsize=20)\n```\n:::\n\n\n# Final thoughts\n\nWe hope this post has helped make the basic steps of making a map simple and easy to understand. For more advanced mapping in Python, check out our ALA Labs article on [how to map invasive species](https://labs.ala.org.au/posts/2023-04-28_plotting-invasive-species/post.html).\n\n\n<details><summary style = \"color: #E06E53;\">Expand for session info</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n-----\ngalah               0.7.0\ngeopandas           0.13.2\nmatplotlib          3.7.2\nnatsort             8.4.0\npandas              2.0.3\nsession_info        1.0.0\n-----\nPython 3.9.16 | packaged by conda-forge | (main, Feb  1 2023, 21:40:25) [Clang 14.0.6 ]\nmacOS-13.5.2-arm64-arm-64bit\n-----\nSession information updated at 2023-11-29 11:13\n```\n:::\n:::\n\n\n</details>\n",
    "supporting": [
      "Make_A_Map_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}