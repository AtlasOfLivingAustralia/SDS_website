{
  "hash": "a83d278cbe7b0abab558cda4258d3259",
  "result": {
    "markdown": "---\ntitle: \"Make a highlighted time series\"\ndescription: |\n  Time series comparisons can be handy for seeing trends in data. Here, we explore how to look at some stuff about ducks   \nauthor:\n  - name: \"Thai Rushbrook\"\n  - name: \"Olivia Torresan\"\n  - name: \"Dax Kellie\"\ndate: \"2022-03-07\"\ntitle-block-banner: \"#B8573E\"\ntoc: true\ntoc-location: left\ntoc-depth: 3\ncategories:\n  - Eukaryota\n  - Animalia\n  - Aves\n  - Summaries\nimage: choropleth_ggnewscale.png\nfreeze: true\ndraft: true\n---\n\n\n\n\n<!-- remove metadata section -->\n\n::: {.cell}\n<style type=\"text/css\">\n#title-block-header.quarto-title-block.default .quarto-title-meta {\n    display: none;\n}\n</style>\n:::\n\n\n\n<!-- Author card -->\n\n:::{.author-card}\n:::{.author-card-text}\n\n#### Author\nThai Rushbrook  \n[Olivia Torresan](https://labs.ala.org.au/people/Torresan_Olivia/index.html)  \n[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  \n\n#### Date\n7 March 2023\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/thai.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/olivia.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::\n\n<!------------------------ Post starts here ------------------------>\n\nThanks to huge efforts by citizen scientists, a majority of species observations in the Atlas of Living Australia are collected opportunistically, where people record observations incidentally rather than through a recurring monitoring program.\n\nHowever, these observations are susceptible to things unrelated to the species itself. It might be rainy, it might be too hot, an area might be inaccessible; all of these factors can affect whether people record an observation or not.\n\nThe COVID-19 pandemic had a major impact on people's health, behaviour and travel. In Australia, several shorter lockdowns over 2020-2021 imposed restrictions on people's movements. Melbourne experienced [the longest continuous lockdown in the world](). These restrictions limited people to either stay at home or choose activities (mainly exercise) that they could do in their local area. To what extent did COVID-19 affect the number of species observations people made over that time? \n\nHere, we'll use a highlighted time-series plot to investigate how lockdowns affected the data collection of *Anatidae* observations (ducks, geese and swans), a group frequently recorded on walks and outdoor gatherings, in Melbourne compared to previous years.\n\n# Get data\n\nWe'll start by downloading *Anatidae* records.\n\n:::{layout-ncol=3 style=\"width=120px;\"}\n\n<img class = \"clipped\" src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/9/2/0/cd4a660e-358c-4863-81b8-08cfd7280295/original\"></img>\n\n<img class = \"clipped\"src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/7/c/4/2/b133aa0c-ba9f-4f19-8f2f-938f34b724c7/original\"></img>\n\n<img class = \"clipped\" src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/c/9/e/f35fbe9d-1116-4eb2-82d4-03d8e032e9c1/original\"></img>\n\n:::\n::: {.figure-caption}\nLeft: [*Tadorna (Casarca) tadornoides* (Tracey Hinton CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/31f020c4-1050-40e7-b499-8cf89afa84fe) Middle: [*Cygnus (Chenopis) atratus* (jpshahady CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/2af3958b-1a06-45a7-8ee2-315c63c2f0c6) Right: [*Spatula rhynchotis* (Annette Green CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/546765db-4567-479d-b78f-77433493fae6)\n:::\n\nFirst, let's load some packages: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(galah)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(grid)\nlibrary(ggplot2)\nlibrary(pilot) # remotes::install_github(\"olihawkins/pilot\")\nlibrary(showtext)\n```\n:::\n\n\nLet's use the [{galah} package]() to download duck records in Melbourne from 2017-2021 to get records from years just before and during COVID-19 lockdowns. \n\nSearching with `galah::search_fields()` shows us that {galah} contains Greater Capital City Statistical Areas, which we can use to filter our query. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(fields, \"city\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  id      description                                                type  link \n  <chr>   <chr>                                                      <chr> <chr>\n1 cl10929 PSMA ABS Greater Capital City Statistical Areas (2016) AB… laye… http…\n```\n:::\n\n```{.r .cell-code}\nsearch_all(fields, \"city\") |> search_values(\"melbourne\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n• Showing values for 'cl10929'.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  field   category         \n  <chr>   <chr>            \n1 cl10929 GREATER MELBOURNE\n```\n:::\n:::\n\n\n\nLet's build our query to return *Anatidae* records from `GREATER MELBOURNE` from 2017 to 2021. We'll use `galah_select()` to return only the `eventDate` column.\n\nYou will need to first provide a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) using `galah_config()` before retrieving records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add registered email (register at ala.org.au)\ngalah_config(email = \"your-email@email.com\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nducks <-\n  galah_call() |>\n  galah_identify(\"Anatidae\") |>\n  galah_filter(\n    cl10929 == \"GREATER MELBOURNE\",\n    # year >= 2017,\n    # year <= 2021,\n    eventDate >= \"2017-01-01T00:00:00Z\",\n    eventDate <= \"2021-12-31T23:59:00Z\",\n    basisOfRecord == \"HUMAN_OBSERVATION\"\n  ) |>\n  galah_select(eventDate) |>\n  atlas_occurrences()\n\nducks |> head(6L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 1\n  eventDate          \n  <dttm>             \n1 2017-01-01 13:00:00\n2 2017-01-01 13:00:00\n3 2017-01-01 13:00:00\n4 2017-01-01 13:00:00\n5 2017-01-01 13:00:00\n6 2017-01-01 13:00:00\n```\n:::\n:::\n\n\nWe'll pull out some week and year of each date and count the total occurrence records for each week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nducks_weekly <- ducks |> \n  mutate(date = as_date(eventDate),\n         year = year(eventDate),\n         week = week(eventDate)) |>\n  group_by(year, week) |>\n  summarise(week_count = n())\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'year'. You can override using the\n`.groups` argument.\n```\n:::\n\n```{.r .cell-code}\nducks_weekly \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 265 × 3\n# Groups:   year [5]\n    year  week week_count\n   <dbl> <dbl>      <int>\n 1  2017     1        647\n 2  2017     2        670\n 3  2017     3        665\n 4  2017     4        790\n 5  2017     5        745\n 6  2017     6        580\n 7  2017     7        658\n 8  2017     8        680\n 9  2017     9        575\n10  2017    10        541\n# … with 255 more rows\n```\n:::\n:::\n\n\nWe are intending to compare record counts in 2020-2021 to previous years. However, because record numbers added to the ALA have grown each year, it's likely that comparing raw numbers will show a biased view that there were more records than previous years.\n\nTo avoid this, let's *scale* our record counts by the total number of *Anatidae* records each year so that we compare proportions rather than raw numbers. \n\nFirst let's download the total *Anatidae* records for each year. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nducks_yearly <- \n  galah_call() |>    \n  galah_identify(\"Anatidae\") |> \n  galah_filter(cl10929 == \"GREATER MELBOURNE\", \n               year >= 2017, year <= 2021) |> \n  galah_group_by(year) |>\n  atlas_counts() |>\n  rename(year_total = count) |>\n  mutate(year = as.numeric(year)) |>\n  arrange(-desc(year))\n  \nducks_yearly\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n   year year_total\n  <dbl>      <int>\n1  2017      37194\n2  2018      48696\n3  2019      47874\n4  2020      48850\n5  2021      57520\n```\n:::\n:::\n\n\nNow we'll split `ducks_weekly` into 5 `data.frame`s for each year and divide the record count by the total for each year. At the end we'll bind the separate `data.frame`s into one again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nducks_scaled <- ducks_weekly %>%\n  split(.$year) %>%\n  map2(.x = .,\n       .y = ducks_yearly$year_total, \n       ~ .x %>%\n         mutate(prop = .x$week_count / .y * 100) %>%\n         select(-week_count)\n  ) %>%\n  bind_rows()\n\nducks_scaled\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 265 × 3\n# Groups:   year [5]\n    year  week  prop\n   <dbl> <dbl> <dbl>\n 1  2017     1  1.74\n 2  2017     2  1.80\n 3  2017     3  1.79\n 4  2017     4  2.12\n 5  2017     5  2.00\n 6  2017     6  1.56\n 7  2017     7  1.77\n 8  2017     8  1.83\n 9  2017     9  1.55\n10  2017    10  1.45\n# … with 255 more rows\n```\n:::\n:::\n\n\nFinally, we'll place our weekly proportions in separate columns with `pivot_wider()`. \n\nIn our final plot we want to compare the \"normal\" number of records collected to those in 2020 and 2021, and it would be nice to represent the \"normal\" number as one line representing the average in \"normal\" years. With that goal in mind, we'll also calculate the mean proportion of records each week from 2017-2019.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nducks_scaled <- ducks_scaled %>%\n  pivot_wider(names_from = year, \n              values_from = prop, \n              names_sort = TRUE,\n              names_glue = \"year_{year}\") |>\n  rowwise() |>\n  mutate(mean_2017_19 = mean(c_across(year_2017:year_2019)))\n\nducks_scaled\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53 × 7\n# Rowwise: \n    week year_2017 year_2018 year_2019 year_2020 year_2021 mean_2017_19\n   <dbl>     <dbl>     <dbl>     <dbl>     <dbl>     <dbl>        <dbl>\n 1     1      1.74      1.74      3.22      2.83      2.18         2.23\n 2     2      1.80      1.89      2.95      1.91      1.86         2.21\n 3     3      1.79      1.56      2.65      2.51      2.02         2.00\n 4     4      2.12      1.53      2.30      2.43      1.75         1.99\n 5     5      2.00      1.62      1.85      1.59      2.03         1.83\n 6     6      1.56      1.34      1.78      1.75      2.05         1.56\n 7     7      1.77      1.77      1.87      1.47      1.57         1.80\n 8     8      1.83      1.37      1.98      1.54      1.90         1.73\n 9     9      1.55      1.45      1.33      1.28      1.84         1.44\n10    10      1.45      1.25      2.12      1.17      1.67         1.61\n# … with 43 more rows\n```\n:::\n:::\n\n\nNow we have our dataset, it needs a bit of reorganising to make it suitable for plotting. Counts are grouped by week of the year, meaning we have 2 sets of weeks 1-52 (one for 2020, one for 2021). To plot these in order along an axis we need to convert this to 1-53 for 2020 (a leap year, extra week), then 54-106 for 2021.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2021 record count proportions\nducks_scaled_2021 <- ducks_scaled |>\n  select(week, \n         prop = year_2021, \n         mean_2017_19) |>\n  mutate(week = 53 + week)\n\nducks_scaled_2021 |> head(5L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 3\n# Rowwise: \n   week  prop mean_2017_19\n  <dbl> <dbl>        <dbl>\n1    54  2.18         2.23\n2    55  1.86         2.21\n3    56  2.02         2.00\n4    57  1.75         1.99\n5    58  2.03         1.83\n```\n:::\n\n```{.r .cell-code}\n# 2020 + 2021 record count proportions\nducks_final <- ducks_scaled |>\n  select(week, \n         prop = year_2020, \n         mean_2017_19) |>\n  bind_rows(ducks_scaled_2021)\n\nducks_final\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 106 × 3\n# Rowwise: \n    week  prop mean_2017_19\n   <dbl> <dbl>        <dbl>\n 1     1  2.83         2.23\n 2     2  1.91         2.21\n 3     3  2.51         2.00\n 4     4  2.43         1.99\n 5     5  1.59         1.83\n 6     6  1.75         1.56\n 7     7  1.47         1.80\n 8     8  1.54         1.73\n 9     9  1.28         1.44\n10    10  1.17         1.61\n# … with 96 more rows\n```\n:::\n:::\n\n\n\n# Lockdowns\n\nDuring the height of the pandemic, Melbourne had 6 distinct lockdowns. Let's add their start and end dates to a table.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_lockdown <- c(1:6)\nstart_date <- c(\"2020-03-31\", \"2020-07-09\",\n                \"2021-02-13\", \"2021-05-28\",\n                \"2021-07-16\", \"2021-08-05\")\nend_date <- c(\"2020-05-12\", \"2020-10-27\",\n              \"2021-02-17\", \"2021-06-10\",\n              \"2021-07-27\", \"2021-10-21\")\n\nlockdowns <- tibble(n_lockdown, start_date, end_date) |>\n  mutate(\n    n_days = as_date(ymd(end_date)) - as_date(ymd(start_date)),\n    weekstart = week(start_date),\n    weekend = week(end_date))\n\nlockdowns \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  n_lockdown start_date end_date   n_days   weekstart weekend\n       <int> <chr>      <chr>      <drtn>       <dbl>   <dbl>\n1          1 2020-03-31 2020-05-12  42 days        13      19\n2          2 2020-07-09 2020-10-27 110 days        28      43\n3          3 2021-02-13 2021-02-17   4 days         7       7\n4          4 2021-05-28 2021-06-10  13 days        22      23\n5          5 2021-07-16 2021-07-27  11 days        29      30\n6          6 2021-08-05 2021-10-21  77 days        31      42\n```\n:::\n:::\n\n\n\n\n<details><summary style = \"color: #E06E53;\">Expand for session info</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19044)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Australia.utf8\n ctype    English_Australia.utf8\n tz       Australia/Sydney\n date     2023-03-10\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.1.0   2023-01-29 [1] CRAN (R 4.2.2)\n forcats     * 1.0.0   2023-01-29 [1] CRAN (R 4.2.2)\n galah       * 1.5.1   2023-02-21 [1] Github (AtlasOfLivingAustralia/galah@bd43dd2)\n ggplot2     * 3.4.1   2023-02-10 [1] CRAN (R 4.2.2)\n htmltools   * 0.5.4   2022-12-07 [1] CRAN (R 4.2.2)\n lubridate   * 1.9.2   2023-02-10 [1] CRAN (R 4.2.2)\n pilot       * 4.0.0   2022-07-13 [1] Github (olihawkins/pilot@f08cc16)\n purrr       * 1.0.1   2023-01-10 [1] CRAN (R 4.2.2)\n readr       * 2.1.4   2023-02-10 [1] CRAN (R 4.2.2)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.1)\n showtext    * 0.9-5   2022-02-09 [1] CRAN (R 4.2.1)\n showtextdb  * 3.0     2020-06-04 [1] CRAN (R 4.2.1)\n stringr     * 1.5.0   2022-12-02 [1] CRAN (R 4.2.2)\n sysfonts    * 0.8.8   2022-03-13 [1] CRAN (R 4.2.1)\n tibble      * 3.1.8   2022-07-22 [1] CRAN (R 4.2.1)\n tidyr       * 1.3.0   2023-01-24 [1] CRAN (R 4.2.2)\n tidyverse   * 2.0.0   2023-02-22 [1] CRAN (R 4.2.2)\n\n [1] C:/Users/KEL329/R-packages\n [2] C:/Users/KEL329/AppData/Local/Programs/R/R-4.2.2/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n</details>\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}