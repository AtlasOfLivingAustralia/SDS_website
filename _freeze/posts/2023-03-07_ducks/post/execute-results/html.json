{
  "hash": "64e9eab5cb9d687b7a5c76a6e1acca5a",
  "result": {
    "markdown": "---\ntitle: \"Make a highlighted time series\"\ndescription: |\n  Time series comparisons can be handy for seeing trends in data. Here, we explore how to look at some stuff about ducks   \nauthor:\n  - name: \"Thai Rushbrook\"\n  - name: \"Olivia Torresan\"\n  - name: \"Dax Kellie\"\ndate: \"2022-03-07\"\ntitle-block-banner: \"#B8573E\"\ntoc: true\ntoc-location: left\ntoc-depth: 3\ncategories:\n  - Eukaryota\n  - Animalia\n  - Aves\n  - Summaries\n  - Intern-post\nimage: choropleth_ggnewscale.png\nfreeze: true\ndraft: true\n---\n\n\n\n\n<!-- remove metadata section -->\n\n::: {.cell}\n<style type=\"text/css\">\n#title-block-header.quarto-title-block.default .quarto-title-meta {\n    display: none;\n}\n</style>\n:::\n\n\n\n<!-- Author card -->\n\n:::{.author-card}\n:::{.author-card-text}\n\n#### Author\nThai Rushbrook  \n[Olivia Torresan](https://labs.ala.org.au/people/Torresan_Olivia/index.html)  \n[Dax Kellie](https://labs.ala.org.au/people/Kellie_Dax/index.html)  \n\n#### Date\n7 March 2023\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/thai.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/olivia.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::{.author-card-image}\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n:::\n\n:::\n\n<!------------------------ Post starts here ------------------------>\n\nThanks to huge efforts by citizen scientists, a majority of species observations in the Atlas of Living Australia are collected opportunistically, where people record observations incidentally rather than through a recurring monitoring program.\n\nHowever, whether an observation is recorded or not doesn't just depend on the species. It might be rainy, it might be too hot, an area might be inaccessible; all of these factors can affect whether people make an observation.\n\nThe COVID-19 pandemic had a major impact on people's health, behaviour and travel. In Australia, several lockdowns over 2020-2021 imposed restrictions on people's movements, limiting them to either stay at home or choose activities (mainly exercise) that they could do in their local area. Melbourne experienced [the longest continuous lockdown in the world](https://www.9news.com.au/national/coronavirus-update-victoria-monday-october-4-melbournes-lockdown-longest-world/e159d5b5-2d0f-452a-adb3-979150f9793f). \n\nTo what extent did COVID-19 and lockdowns affect the number of species observations people made over that time? Here, we'll use a highlighted time-series plot to investigate how lockdowns affected the data collection of *Anatidae* observations (ducks, geese and swans), a group frequently recorded on walks and outdoor gatherings, in Melbourne compared to previous years.\n\n# Get data\n\nWe'll start by downloading *Anatidae* records.\n\n:::{layout-ncol=3 style=\"width=120px;\"}\n\n<img class = \"clipped\" src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/5/9/2/0/cd4a660e-358c-4863-81b8-08cfd7280295/original\"></img>\n\n<img class = \"clipped\"src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/7/c/4/2/b133aa0c-ba9f-4f19-8f2f-938f34b724c7/original\"></img>\n\n<img class = \"clipped\" src=\"https://ala-images.s3.ap-southeast-2.amazonaws.com/store/1/c/9/e/f35fbe9d-1116-4eb2-82d4-03d8e032e9c1/original\"></img>\n\n:::\n::: {.figure-caption}\nLeft: [*Tadorna (Casarca) tadornoides* (Tracey Hinton CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/31f020c4-1050-40e7-b499-8cf89afa84fe) Middle: [*Cygnus (Chenopis) atratus* (jpshahady CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/2af3958b-1a06-45a7-8ee2-315c63c2f0c6) Right: [*Spatula rhynchotis* (Annette Green CC-BY-NC 4.0 (Int))](https://biocache.ala.org.au/occurrences/546765db-4567-479d-b78f-77433493fae6)\n:::\n\nFirst, let's load some packages: \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load packages\nlibrary(galah)\nlibrary(tidyverse)\nlibrary(lubridate)\nlibrary(grid)\nlibrary(ggplot2)\nlibrary(pilot) # remotes::install_github(\"olihawkins/pilot\")\nlibrary(ggtext)\nlibrary(showtext)\n```\n:::\n\n\nLet's use the [{galah} package]() to download duck records in Melbourne from 2017-2021 to get records from years just before and during COVID-19 lockdowns. \n\nSearching with `galah::search_fields()` shows us that {galah} contains Greater Capital City Statistical Areas, which we can use to filter our query. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(fields, \"city\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 4\n  id      description                                                type  link \n  <chr>   <chr>                                                      <chr> <chr>\n1 cl10929 PSMA ABS Greater Capital City Statistical Areas (2016) AB… laye… http…\n```\n:::\n\n```{.r .cell-code}\nsearch_all(fields, \"city\") |> search_values(\"melbourne\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n• Showing values for 'cl10929'.\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  field   category         \n  <chr>   <chr>            \n1 cl10929 GREATER MELBOURNE\n```\n:::\n:::\n\n\n\nLet's build our query to return *Anatidae* records from `GREATER MELBOURNE` from 2017 to 2021. We'll use `galah_select()` to return only the `eventDate` column.\n\nYou will need to first provide a [registered email with the ALA](https://auth.ala.org.au/userdetails/registration/createAccount) using `galah_config()` before retrieving records.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Add registered email (register at ala.org.au)\ngalah_config(email = \"your-email@email.com\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nducks <-\n  galah_call() |>\n  galah_identify(\"Anatidae\") |>\n  galah_filter(\n    cl10929 == \"GREATER MELBOURNE\",\n    # year >= 2017,\n    # year <= 2021,\n    eventDate >= \"2017-01-01T00:00:00Z\",\n    eventDate <= \"2021-12-31T23:59:00Z\",\n    basisOfRecord == \"HUMAN_OBSERVATION\"\n  ) |>\n  galah_select(eventDate) |>\n  atlas_occurrences()\n\nducks |> head(6L)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 1\n  eventDate          \n  <dttm>             \n1 2017-01-01 13:00:00\n2 2017-01-01 13:00:00\n3 2017-01-01 13:00:00\n4 2017-01-01 13:00:00\n5 2017-01-01 13:00:00\n6 2017-01-01 13:00:00\n```\n:::\n:::\n\n\nWe'll pull out some week and year of each date and count the total occurrence records for each week.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nducks_weekly <- ducks |> \n  mutate(date = as_date(eventDate),\n         year = year(eventDate),\n         week = week(eventDate)) |>\n  group_by(year, week) |>\n  summarise(week_count = n())\n\nducks_weekly \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 265 × 3\n# Groups:   year [5]\n    year  week week_count\n   <dbl> <dbl>      <int>\n 1  2017     1        647\n 2  2017     2        670\n 3  2017     3        665\n 4  2017     4        790\n 5  2017     5        745\n 6  2017     6        580\n 7  2017     7        658\n 8  2017     8        680\n 9  2017     9        575\n10  2017    10        541\n# … with 255 more rows\n```\n:::\n:::\n\n\nWe are intending to compare record counts in 2020-2021 to previous years. However, because record numbers added to the ALA have grown each year, it's likely that comparing raw numbers will show a biased view that there were more records than previous years.\n\nTo avoid this, let's *scale* our record counts by the total number of *Anatidae* records each year so that we compare proportions rather than raw numbers. \n\nFirst let's download the total *Anatidae* records for each year. \n\n\n::: {.cell}\n\n```{.r .cell-code}\nducks_yearly <- \n  galah_call() |>    \n  galah_identify(\"Anatidae\") |> \n  galah_filter(cl10929 == \"GREATER MELBOURNE\", \n               year >= 2017, year <= 2021) |> \n  galah_group_by(year) |>\n  atlas_counts() |>\n  rename(year_total = count) |>\n  mutate(year = as.numeric(year)) |>\n  arrange(-desc(year))\n  \nducks_yearly\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 5 × 2\n   year year_total\n  <dbl>      <int>\n1  2017      37194\n2  2018      48696\n3  2019      47874\n4  2020      48850\n5  2021      57520\n```\n:::\n:::\n\n\nNow we'll split `ducks_weekly` into 5 `data.frame`s for each year and divide the record count by the total for each year. At the end we'll bind the separate `data.frame`s into one again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nducks_scaled <- ducks_weekly %>%\n  split(.$year) %>%\n  map2(.x = .,\n       .y = ducks_yearly$year_total, \n       ~ .x %>%\n         mutate(prop = .x$week_count / .y) %>%\n         select(-week_count)\n  ) %>%\n  bind_rows()\n\nducks_scaled\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 265 × 3\n# Groups:   year [5]\n    year  week   prop\n   <dbl> <dbl>  <dbl>\n 1  2017     1 0.0174\n 2  2017     2 0.0180\n 3  2017     3 0.0179\n 4  2017     4 0.0212\n 5  2017     5 0.0200\n 6  2017     6 0.0156\n 7  2017     7 0.0177\n 8  2017     8 0.0183\n 9  2017     9 0.0155\n10  2017    10 0.0145\n# … with 255 more rows\n```\n:::\n:::\n\n\nIn our final plot we want to compare the \"normal\" number of records collected to those in 2020 and 2021, and it would be nice to represent the \"normal\" number as one line representing the average in \"normal\" years. With that goal in mind, we'll also calculate the mean proportion of records each week from 2017-2019.\n\nTo do this, we'll place our weekly proportions in separate columns with `pivot_wider()` and calculate the mean proportion of observations over 2017-2019.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nducks_scaled <- ducks_scaled %>%\n  pivot_wider(names_from = year, \n              values_from = prop, \n              names_sort = TRUE,\n              names_glue = \"year_{year}\") |>\n  rowwise() |>\n  mutate(\n    mean_2017_19 = mean(c_across(year_2017:year_2019))\n    ) |>\n  select(-year_2017, -year_2018, -year_2019)\n\nducks_scaled\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 53 × 4\n# Rowwise: \n    week year_2020 year_2021 mean_2017_19\n   <dbl>     <dbl>     <dbl>        <dbl>\n 1     1    0.0283    0.0218       0.0223\n 2     2    0.0191    0.0186       0.0221\n 3     3    0.0251    0.0202       0.0200\n 4     4    0.0243    0.0175       0.0199\n 5     5    0.0159    0.0203       0.0183\n 6     6    0.0175    0.0205       0.0156\n 7     7    0.0147    0.0157       0.0180\n 8     8    0.0154    0.0190       0.0173\n 9     9    0.0128    0.0184       0.0144\n10    10    0.0117    0.0167       0.0161\n# … with 43 more rows\n```\n:::\n:::\n\n\nNow we have our dataset, it needs a bit of reorganising to make it suitable for plotting. Counts are grouped by week of the year, meaning we have 2 sets of weeks 1-52 (one for 2020, one for 2021). To plot these in order along an axis we need to convert this to 1-53 for 2020 (a leap year, extra week), then 54-106 for 2021.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 2021 record count proportions\nducks_scaled_2021 <- ducks_scaled |>\n  rename(prop = year_2021) |>\n  mutate(week = 53 + week)\n\n# 2020 + 2021 record count proportions\nducks_final <- ducks_scaled |>\n  rename(prop = year_2020) |>\n  bind_rows(ducks_scaled_2021)\n\nducks_final\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 106 × 5\n# Rowwise: \n    week   prop year_2021 mean_2017_19 year_2020\n   <dbl>  <dbl>     <dbl>        <dbl>     <dbl>\n 1     1 0.0283    0.0218       0.0223        NA\n 2     2 0.0191    0.0186       0.0221        NA\n 3     3 0.0251    0.0202       0.0200        NA\n 4     4 0.0243    0.0175       0.0199        NA\n 5     5 0.0159    0.0203       0.0183        NA\n 6     6 0.0175    0.0205       0.0156        NA\n 7     7 0.0147    0.0157       0.0180        NA\n 8     8 0.0154    0.0190       0.0173        NA\n 9     9 0.0128    0.0184       0.0144        NA\n10    10 0.0117    0.0167       0.0161        NA\n# … with 96 more rows\n```\n:::\n:::\n\n\n\n# Lockdowns\n\nDuring the height of the pandemic, Melbourne had 6 distinct lockdowns. Let's add their start and end dates to a `tibble`.\n\nBecause we want to plot 2020 and 2021 on the same plot, we'll use `ifelse()` to add 54 to weeks in 202 so that our week numbers extend from the beginning of 2020 to the end of 2021.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nn_lockdown <- c(1:6)\nstart_date <- c(\"2020-03-31\", \"2020-07-09\",\n                \"2021-02-13\", \"2021-05-28\",\n                \"2021-07-16\", \"2021-08-05\")\nend_date <- c(\"2020-05-12\", \"2020-10-27\",\n              \"2021-02-17\", \"2021-06-10\",\n              \"2021-07-27\", \"2021-10-21\")\n\nlockdowns <- tibble(n_lockdown, start_date, end_date) |>\n  mutate(\n    n_days = as_date(ymd(end_date)) - as_date(ymd(start_date)),\n    week_start = ifelse(year(start_date) == 2020, \n                        week(start_date), week(start_date) + 54),\n    week_end = ifelse(year(end_date) == 2020, \n                      week(end_date), week(end_date) + 54),\n    )\nlockdowns \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 6\n  n_lockdown start_date end_date   n_days   week_start week_end\n       <int> <chr>      <chr>      <drtn>        <dbl>    <dbl>\n1          1 2020-03-31 2020-05-12  42 days         13       19\n2          2 2020-07-09 2020-10-27 110 days         28       43\n3          3 2021-02-13 2021-02-17   4 days         61       61\n4          4 2021-05-28 2021-06-10  13 days         76       77\n5          5 2021-07-16 2021-07-27  11 days         83       84\n6          6 2021-08-05 2021-10-21  77 days         85       96\n```\n:::\n:::\n\n\n\n# Make plot\n\n## Step 3: Plot!\n\nTo help us see the components of our final plot more clealy, let's construct our visualisation step-by-step.\n\nFirst, add our lockdown dates as highlighted rectangular blocks. To do this we can use `geom_rect()` and set `xmin` and `xmax` values to our `week_start` and `week_end` columns in `lockdowns`. We'll make the rectangle spread across the entire plot by setting `ymax = Inf` and `ymin = 0`.\n\nSetting our `fill` inside of `aes()` and defining its value within `scale_fill_manual()` allows us to add the yellow highlighted colour to its own legend, which will be useful later. \n\n\n::: {.cell .column-body-outset layout-align=\"center\"}\n\n```{.r .cell-code}\np1 <- ggplot() +\n  geom_rect(data = lockdowns,\n            aes(xmin = week_start,\n                xmax = week_end,\n                fill = \"Lockdown\"),\n            ymin = 0,\n            ymax = Inf,\n            alpha=0.2) +\n  scale_fill_manual(\n    values = c(\"Lockdown\" = pilot_color(\"yellow\")))\np1\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-17-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nNext we'll add our species observation counts as lines. We'll also define their colours and edit the legend and axis labels. \n\nThe plot created after these steps is enough to see everything we need to see about our data. You *could* stop here if you wished, especially if you were only making this plot for yourself.\n\n\n::: {.cell .column-body-outset layout-align=\"center\"}\n\n```{.r .cell-code}\np2 <- p1 +\n  # add lines\n  geom_line(data = ducks_final, \n            aes(x = week, y = prop, \n            color = \"2020-21 Records\"), \n            linewidth = 1) + \n  geom_line(data = ducks_final, \n            aes(x = week, y = mean_2017_19, \n            color = \"2017-19 Average\"),\n            linetype = \"twodash\", \n            linewidth = 0.8) + \n  # add fill\n  geom_area(data = ducks_final, \n            aes(x = week, y = prop),\n            fill=pilot_color(\"blue\"), \n            alpha=0.3) + \n  scale_color_manual(values = c(pilot_color(\"orange\"),\n                                pilot_color(\"blue\")), \n                     labels = c(\"2017-19 average\", \n                                \"2020-21 occurrences\")) +\n  guides(fill = guide_legend(title = \"\"), \n         color = guide_legend(title = \"Year\")) +\n  labs(y = \"Proportion of ducks recorded\",\n       x = \"Month\",\n       title = \"Duck, geese & swan observations in Melbourne (2020-21 vs. 2017-19)\",\n       subtitle = \"Weekly ALA records during and prior to COVID-19\",\n       caption = \"Weekly proportions scaled by total records for that year\")\np2\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-18-1.png){fig-align='center' width=672}\n:::\n:::\n\n\nHere's a more refined visualisation with nice fonts, axis scales, axis labels and titles:\n\n(feel free to use this code for your own plots!)\n\n\n::: {.cell .column-page layout-align=\"center\"}\n\n```{.r .cell-code  code-fold=\"true\"}\n# add fonts\nfont_add_google(\"Montserrat\", family = \"mont\")\nfont_add_google(\"Hind\", family = \"hind\")  \nshowtext_auto(enable = TRUE)\n\np2 + \n  # make axis scales understandable\n  scale_y_continuous(expand = c(0, 0),\n                     limits = c(0, 0.035),\n                     labels = scales::percent_format()) +\n  scale_x_continuous(expand = c(0, 0),\n                     limits = c(1, 106),\n                     breaks = c(1, 14, 27, 40, 53, 66, 79, 92),\n                     labels = c(\"Jan\", \"Apr\", \"Jul\", \"Oct\", \"Jan\", \"Apr\", \"Jul\", \"Oct\")) +\n  # add year x axis labels\n  coord_cartesian(clip = \"off\") +\n  annotate_pilot(label = \"2020\", x = 27, y = 0, \n                 alpha = 0.7, vjust = 3.8,size = 10) +\n  annotate_pilot(label = \"2021\", x = 79, y = 0, \n                 alpha = 0.7, vjust = 3.8, size = 10) +\n  labs(title = \"Duck, geese & swan observations in Melbourne (2020-21 vs. 2017-19)\") +\n  theme_pilot(grid = \"\",\n              axes = \"bl\") +\n  theme(axis.title.x = element_text(size = 23, vjust = -1.3),\n        axis.title.y = element_text(size = 23),\n        axis.text.x = element_text(size = 20),\n        axis.text.y = element_text(size = 20),\n        axis.line = element_line(linewidth = 0.5),\n        legend.text = element_text(size = 23),\n        legend.title = element_text(size = 20),\n        plot.caption = element_text(size = 18),\n        text = element_text(family = \"hind\"),\n        plot.title = element_markdown(family = \"mont\", size = 31),\n        plot.subtitle = element_text(family = \"mont\", size = 28))\n```\n\n::: {.cell-output-display}\n![](post_files/figure-html/unnamed-chunk-19-1.png){fig-align='center' width=960}\n:::\n:::\n\n\nNow that we have our final plot, we can see a few interesting trends: \n\n  1. Species observations were *lower* than the 2017-2019 average during the first lockdown (soon after COVID-19 arrived in Australia). \n  2. Species observations were *higher* than the 2017-2019 average during the 2 longer lockdowns.\n  3. Observations increased in the last half of all lockdowns except the first lockdown.\n  \nAre these trends that you expected to see? \n\nIt's impossible to make any claims of *why* these trends emerged from our data visualisation alone, but we can speculate (for fun). \n\nWere people making fewer observations in the first lockdown because they were preoccupied with other priorities as they settled into new working-from-home routines? Did people make more observations at the tail end of lockdowns because they were spending more time by natural ponds and lakes, seeking anxiety relief as they grew weary spending time at home? \n\nSome evidence from the US found [more people were using natural spaces during COVID-19](https://journals.plos.org/plosone/article?id=10.1371/journal.pone.0243344), and [time in these spaces lowered depression and anxiety](https://www.sciencedirect.com/science/article/pii/S1353829222000740). A New Zealand study [found similar results](https://www.mdpi.com/2071-1050/14/12/7308).\n\n# Final thoughts\n\nThis post has detailed you can use ALA data to explore relationships between record counts and events. Although we can't make any causal claims from what we see in our plot, it's a nice way to do some exploratory analysis of a lot of data!\n\n\n<details><summary style = \"color: #E06E53;\">Expand for session info</summary>\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.2.2 (2022-10-31 ucrt)\n os       Windows 10 x64 (build 19044)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Australia.utf8\n ctype    English_Australia.utf8\n tz       Australia/Sydney\n date     2023-03-15\n pandoc   2.19.2 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.1.0   2023-01-29 [1] CRAN (R 4.2.2)\n forcats     * 1.0.0   2023-01-29 [1] CRAN (R 4.2.2)\n galah       * 1.5.1   2023-02-21 [1] Github (AtlasOfLivingAustralia/galah@bd43dd2)\n ggplot2     * 3.4.1   2023-02-10 [1] CRAN (R 4.2.2)\n ggtext      * 0.1.2   2022-09-16 [1] CRAN (R 4.2.2)\n htmltools   * 0.5.4   2022-12-07 [1] CRAN (R 4.2.2)\n lubridate   * 1.9.2   2023-02-10 [1] CRAN (R 4.2.2)\n pilot       * 4.0.0   2022-07-13 [1] Github (olihawkins/pilot@f08cc16)\n purrr       * 1.0.1   2023-01-10 [1] CRAN (R 4.2.2)\n readr       * 2.1.4   2023-02-10 [1] CRAN (R 4.2.2)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.2.1)\n showtext    * 0.9-5   2022-02-09 [1] CRAN (R 4.2.1)\n showtextdb  * 3.0     2020-06-04 [1] CRAN (R 4.2.1)\n stringr     * 1.5.0   2022-12-02 [1] CRAN (R 4.2.2)\n sysfonts    * 0.8.8   2022-03-13 [1] CRAN (R 4.2.1)\n tibble      * 3.1.8   2022-07-22 [1] CRAN (R 4.2.1)\n tidyr       * 1.3.0   2023-01-24 [1] CRAN (R 4.2.2)\n tidyverse   * 2.0.0   2023-02-22 [1] CRAN (R 4.2.2)\n\n [1] C:/Users/KEL329/R-packages\n [2] C:/Users/KEL329/AppData/Local/Programs/R/R-4.2.2/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n:::\n:::\n\n\n</details>\n",
    "supporting": [
      "post_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}