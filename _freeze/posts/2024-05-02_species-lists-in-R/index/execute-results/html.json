{
  "hash": "85dfca24acc1b836e4a952b11b30f763",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Download a species list and cross-reference with conservation status lists in R\"\ndescription: |\n  Knowing what species have been observed in a local area is a regular task for ecosystem management. Here we show how to make a species list with galah and how to cross-reference this list with threatened and sensitive species lists. We then show how to visualise this information as a waffle chart using {waffle} & {ggplot2}.\nauthor:\n  - name: \"Dax Kellie\"\n  - name: \"Amanda Buyan\"\ndate: \"2024-05-02\"\ntitle-block-banner: \"#B8573E\"\ntoc: true\ntoc-location: left\ntoc-depth: 2\ncategories:\n  - Eukaryota\n  - Animalia\n  - Plantae\n  - Summaries\n  - R\nimage: waffle-chart.png\nfreeze: true\ndraft: true\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n\n\n<!-- remove metadata section -->\n\n\n\n```{=html}\n<style>\n  #title-block-header.quarto-title-block.default .quarto-title-meta {\n      display: none;\n  }\n</style>\n```\n\n\n<!-- Author card -->\n\n::: author-card\n::: author-card-text\n#### Author\n\n[Dax Kellie](https://labs.ala.org.au/about/Kellie_Dax/)\\\n[Amanda Buyan](https://labs.ala.org.au/about/Buyan_Amanda/)\n\n#### Date\n\n2 May 2024\n:::\n\n::: author-card-image\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/dax.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n\n:::\n\n::: author-card-image\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](https://raw.githubusercontent.com/AtlasOfLivingAustralia/ala-labs/main/images/people/amanda.jpg){width=120px style=\"clip-path: circle();\"}\n:::\n:::\n\n\n:::\n:::\n\n<!------------------------ Post starts here ------------------------>\n\nKnowing what species inhabit an area is important for conservation and ecosystem management. In particular, it can help us find out how many known species are in a given area, whether each species is common or rare, and whether any species are threatened or endangered.\n\nIn this post, we will use the [galah](https://galah.ala.org.au/R/), [waffle](https://github.com/hrbrmstr/waffle) and [ggplot2](https://ggplot2.tidyverse.org/) packages to show you how to download a list of species within the Yass Valley in 2023, cross-reference this list with state-wide conservation status lists, and visualise the number of threatened and sensitive species in the region. \n\n::: aside\n\nFor those unfamiliar with Australian geography, Yass Valley is located here:\n\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n:::\n\n# Download a list of species\n\nThere are two ways to narrow a download query to return information for a specific region:  \n\n  * Using fields available in galah (downloaded from the ALA)\n  * Using a shapefile\n  \nThe method you choose depends on whether the region you wish to return species for is already within galah, or whether you require a list for a more specific area defined by a shapefile.\n\nFirst let's load our packages.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(sf)\nlibrary(rmapshaper)\nlibrary(here)\nlibrary(galah)\n```\n:::\n\n\n\nTo download species lists, you will also need to enter a registered email with the ALA using `galah_config()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngalah_config(email = \"your-email-here\")\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\n::: {.panel-tabset .nav-pills}\n\n# Fields in galah\n\n## Search for fields in galah\n\nTo find which fields and layers exist within galah to help us narrow our query, we can use the `search_all()` function. Let's do a text search to find what fields contain information on \"Local Government Areas\".\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(fields, \"Local Government Areas\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  id       description                                      type  \n  <chr>    <chr>                                            <chr> \n1 cl10923  PSMA Local Government Areas (2018)               fields\n2 cl110923 PSMA Local Government Areas - Abbreviated (2018) fields\n3 cl11170  Local Government Areas 2023                      fields\n4 cl959    Local Government Areas                           fields\n```\n\n\n:::\n:::\n\n\n\nThe field `cl10923`[^1] appears to contain the most recent data (from 2018). We can preview what values are *within* the field `cl10923` using `show_values()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(fields, \"cl10923\") |>\n  show_values()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Showing values for 'cl10923'.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 560 × 1\n   cl10923                     \n   <chr>                       \n 1 BRISBANE CITY               \n 2 GREATER GEELONG CITY        \n 3 EAST GIPPSLAND SHIRE        \n 4 MORETON BAY REGIONAL        \n 5 PASTORAL UNINCORPORATED AREA\n 6 COOK SHIRE                  \n 7 CAIRNS REGIONAL             \n 8 TOWNSVILLE CITY             \n 9 SUNSHINE COAST REGIONAL     \n10 CENTRAL COAST COUNCIL       \n# ℹ 550 more rows\n```\n\n\n:::\n:::\n\n\n\nThere are lots of Local Government Areas! To check that Yass Valley is included, we can do a text search for values that match \"YASS VALLEY\".\n\n[^1]: Each spatial layer has a two letter code, along with a number to identify it. The abbreviations are as follows:\n  * `cl` = contextual layer (i.e. boundaries of LGAs, Indigenous Protected Areas, States/Territories etc.)  \n  * `10923` = number associated with the spatial layer in the atlas\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(fields, \"cl10923\") |>\n  search_values(\"YASS VALLEY\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n• Showing values for 'cl10923'.\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 × 1\n  cl10923            \n  <chr>              \n1 YASS VALLEY COUNCIL\n```\n\n\n:::\n:::\n\n\n\n\n## Download data\n\nUsing the `field` and `category` returned above, we can now build our query. We begin our query with `galah_call()` and filter our query to only Yass Valley in the year 2023. We then specify we wish to return a species list by ending our query with `atlas_species()`. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_yass <- galah_call() |>\n  filter(cl10923 == \"YASS VALLEY COUNCIL\",\n         year == 2023) |>\n  atlas_species()\n\nspecies_yass\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,154 × 11\n   taxon_concept_id       species_name scientific_name_auth…¹ taxon_rank kingdom\n   <chr>                  <chr>        <chr>                  <chr>      <chr>  \n 1 https://biodiversity.… Gymnorhina … (Latham, 1801)         species    Animal…\n 2 https://biodiversity.… Cacatua (Ca… (Latham, 1790)         species    Animal…\n 3 https://biodiversity.… Malurus (Ma… (Ellis, 1782)          species    Animal…\n 4 https://biodiversity.… Eolophus ro… (Vieillot, 1817)       species    Animal…\n 5 https://biodiversity.… Platycercus… (Gmelin, 1788)         species    Animal…\n 6 https://biodiversity.… Rhipidura (… Gould, 1840            species    Animal…\n 7 https://biodiversity.… Corvus coro… Vigors & Horsfield, 1… species    Animal…\n 8 https://biodiversity.… Strepera (S… (Shaw, 1790)           species    Animal…\n 9 https://biodiversity.… Grallina cy… (Latham, 1801)         species    Animal…\n10 https://biodiversity.… Cormobates … (Latham, 1801)         species    Animal…\n# ℹ 1,144 more rows\n# ℹ abbreviated name: ¹​scientific_name_authorship\n# ℹ 6 more variables: phylum <chr>, class <chr>, order <chr>, family <chr>,\n#   genus <chr>, vernacular_name <chr>\n```\n\n\n:::\n:::\n\n\n\nIt's also possible to group by each species and return the observations counts by ending our query with `atlas_counts()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_counts <- galah_call() |>\n  filter(cl10923 == \"YASS VALLEY COUNCIL\",\n         year == 2023) |>\n  group_by(species) |>\n  atlas_counts()\n\nspecies_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,154 × 2\n   species               count\n   <chr>                 <int>\n 1 Gymnorhina tibicen     1197\n 2 Cacatua galerita        892\n 3 Malurus cyaneus         827\n 4 Eolophus roseicapilla   797\n 5 Platycercus elegans     789\n 6 Rhipidura albiscapa     709\n 7 Corvus coronoides       634\n 8 Strepera graculina      530\n 9 Grallina cyanoleuca     526\n10 Cormobates leucophaea   489\n# ℹ 1,144 more rows\n```\n\n\n:::\n:::\n\n\n\n\n# External shapefile\n\n## Download shapefile\n\nTo retrieve the spatial outline of Yass Valley, let's download the latest Local Government Areas data from the [Australian Bureau of Statistics Digital Boundary files page](https://www.abs.gov.au/statistics/standards/australian-statistical-geography-standard-asgs-edition-3/jul2021-jun2026/access-and-downloads/digital-boundary-files). Find \"Local Government Areas - 2023 - Shapefile\" and click \"Download ZIP\". Save the zip folder in your current directory and unzip it.\n\nLet's read the file into R. We will also simplify the shapefile[^simplify] using `ms_simplify()` from the [rmapshaper package](https://andyteucher.ca/rmapshaper/) because complex shapefiles can sometimes cause problems with sending queries to the ALA.\n\n[^simplify]: Simplifying a shapefile removes the number of total points that draw the shape outline.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlga <- sf::st_read(here(\"LGA_2023_AUST_GDA2020.shp\")) |>\n  rmapshaper::ms_simplify(keep = 0.01)\nlga\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 544 features and 8 fields\nGeometry type: GEOMETRY\nDimension:     XY\nBounding box:  xmin: 105.5335 ymin: -43.6331 xmax: 167.9969 ymax: -9.229273\nGeodetic CRS:  GDA2020\nFirst 10 features:\n   LGA_CODE23    LGA_NAME23 AUS_CODE21 STE_CODE21      STE_NAME21   AREASQKM\n1       10050        Albury        AUS          1 New South Wales   305.6386\n2       10180      Armidale        AUS          1 New South Wales  7809.4406\n3       10250       Ballina        AUS          1 New South Wales   484.9692\n4       10300     Balranald        AUS          1 New South Wales 21690.7493\n5       10470      Bathurst        AUS          1 New South Wales  3817.8645\n6       10500 Bayside (NSW)        AUS          1 New South Wales    50.6204\n7       10550   Bega Valley        AUS          1 New South Wales  6278.5013\n8       10600     Bellingen        AUS          1 New South Wales  1600.4338\n9       10650      Berrigan        AUS          1 New South Wales  2065.8878\n10      10750     Blacktown        AUS          1 New South Wales   238.8471\n   AUS_NAME21                                               LOCI_URI21\n1   Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/10050\n2   Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/10180\n3   Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/10250\n4   Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/10300\n5   Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/10470\n6   Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/10500\n7   Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/10550\n8   Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/10600\n9   Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/10650\n10  Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/10750\n                         geometry\n1  POLYGON ((146.8177 -36.0673...\n2  POLYGON ((152.2957 -30.9310...\n3  POLYGON ((153.4496 -28.7550...\n4  POLYGON ((143.5525 -33.1404...\n5  POLYGON ((149.3947 -33.9975...\n6  POLYGON ((151.155 -33.92618...\n7  POLYGON ((149.9762 -37.5051...\n8  POLYGON ((152.8035 -30.1895...\n9  POLYGON ((145.4845 -35.5119...\n10 POLYGON ((150.8129 -33.8223...\n```\n\n\n:::\n:::\n\n\n\n\nNow let's transform the Coordinate Reference System (CRS) of our shapefile to [EPSG](https://en.wikipedia.org/wiki/EPSG_Geodetic_Parameter_Dataset):4326 (the standard used in cartography and GPS, also known as [WGS84](https://en.wikipedia.org/wiki/World_Geodetic_System)) so that it matches the projection of our data from the ALA [^2]. \n\n[^2]: Check out [this post](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/#make-a-map-1) for a better explanation of what CRS is and how it affects maps.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlga <- lga |>\n  st_transform(crs = 4326)\n```\n:::\n\n\n\nNext we can filter our shapefile to only Yass Valley. The column `LGA_NAME23` contains area names, and we can filter our data frame to only rows where `LGA_NAME23` is equal to `Yass Valley`. We are left with a single polygon shape of Yass Valley.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyass_valley <- lga |>\n  filter(LGA_NAME23 == \"Yass Valley\")\n\nyass_valley\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 1 feature and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 148.5223 ymin: -35.31692 xmax: 149.4226 ymax: -34.53557\nGeodetic CRS:  WGS 84\n  LGA_CODE23  LGA_NAME23 AUS_CODE21 STE_CODE21      STE_NAME21 AREASQKM\n1      18710 Yass Valley        AUS          1 New South Wales 3995.017\n  AUS_NAME21                                               LOCI_URI21\n1  Australia https://linked.data.gov.au/dataset/asgsed3/LGA2023/18710\n                        geometry\n1 POLYGON ((148.9476 -34.6440...\n```\n\n\n:::\n:::\n\n\n\n## Download data\n\nNow that `yass_valley` contains our LGA shape, we can build our query. Once again, we'll begin our query with `galah_call()` and filter to only records from 2023. We can also specify we want records within our `yass_valley` shapefile with `galah_geolocate()`. We then specify we wish to return a species list by ending our query with `atlas_species()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_yass <- galah_call() |>\n  filter(year == 2023) |>\n  galah_geolocate(yass_valley) |>\n  atlas_species()\n\nspecies_yass\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,207 × 11\n   taxon_concept_id       species_name scientific_name_auth…¹ taxon_rank kingdom\n   <chr>                  <chr>        <chr>                  <chr>      <chr>  \n 1 https://biodiversity.… Gymnorhina … (Latham, 1801)         species    Animal…\n 2 https://biodiversity.… Malurus (Ma… (Ellis, 1782)          species    Animal…\n 3 https://biodiversity.… Cacatua (Ca… (Latham, 1790)         species    Animal…\n 4 https://biodiversity.… Eolophus ro… (Vieillot, 1817)       species    Animal…\n 5 https://biodiversity.… Platycercus… (Gmelin, 1788)         species    Animal…\n 6 https://biodiversity.… Corvus coro… Vigors & Horsfield, 1… species    Animal…\n 7 https://biodiversity.… Grallina cy… (Latham, 1801)         species    Animal…\n 8 https://biodiversity.… Rhipidura (… Gould, 1840            species    Animal…\n 9 https://biodiversity.… Strepera (S… (Shaw, 1790)           species    Animal…\n10 https://biodiversity.… Hirundo (Hi… Gould, 1843            species    Animal…\n# ℹ 1,197 more rows\n# ℹ abbreviated name: ¹​scientific_name_authorship\n# ℹ 6 more variables: phylum <chr>, class <chr>, order <chr>, family <chr>,\n#   genus <chr>, vernacular_name <chr>\n```\n\n\n:::\n:::\n\n\n\nIt's also possible to group by each species and return the observations counts by ending our query with `atlas_counts()`.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nspecies_counts <- galah_call() |>\n  filter(year == 2023) |>\n  galah_geolocate(yass_valley) |>\n  group_by(species) |>\n  atlas_counts()\n\nspecies_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,207 × 2\n   species               count\n   <chr>                 <int>\n 1 Gymnorhina tibicen     1614\n 2 Malurus cyaneus        1204\n 3 Cacatua galerita       1146\n 4 Eolophus roseicapilla  1065\n 5 Platycercus elegans    1014\n 6 Corvus coronoides       878\n 7 Grallina cyanoleuca     868\n 8 Rhipidura albiscapa     863\n 9 Strepera graculina      767\n10 Hirundo neoxena         708\n# ℹ 1,197 more rows\n```\n\n\n:::\n:::\n\n\n\n:::\n\n# Cross-reference with threatened and sensitive species lists\n\nNext we will compare our Yass valley species list with several state-wide conservation status lists of threatened and sensitive species. We can retrieve lists of threatened and sensitive species in one of two ways: <br>\n\n  - Use the lists available in the Atlas of Living Australia<br>\n  - Use your own list\n\nBoth use the same method of matching species names in our Yass Valley list to species names in official conservation status lists. However, there is a slightly different workflow between using galah and using an externally downloaded list. Choose from the options below to use either method.\n\n::: {.panel-tabset .nav-pills}\n\n# Using lists in the ALA\n\nWe can use galah to access lists that are available on the Atlas of Living Australia to compare to our Yass Valley species list. \n\nYass Valley is within the state of New South Wales, so let's do a text search for \"New South Wales\" to see what state-specific lists are available.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(lists, \"New South Wales\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 21\n  species_list_uid listName        listType dateCreated lastUpdated lastUploaded\n  <chr>            <chr>           <chr>    <chr>       <chr>       <chr>       \n1 dr650            New South Wale… CONSERV… 2015-04-04… 2024-05-30… 2024-05-30T…\n2 dr487            New South Wale… SENSITI… 2013-06-20… 2024-07-12… 2024-07-12T…\n# ℹ 15 more variables: lastMatched <chr>, username <chr>, itemCount <int>,\n#   region <chr>, isAuthoritative <lgl>, isInvasive <lgl>, isThreatened <lgl>,\n#   isBIE <lgl>, isSDS <lgl>, wkt <chr>, category <chr>, generalisation <chr>,\n#   authority <chr>, sdsType <chr>, looseSearch <lgl>\n```\n\n\n:::\n:::\n\n\n\nTwo lists are returned, and both appear relevant. With the help of some additional columns returned by `search_all()`—`listType`, `isAuthoritative` and `isThreatened`—we can learn more about which list suits our needs best. Although both lists are authoritative, only one list (`dr650`) contains threatened species whereas the other `dr487` contains sensitive species. \n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsearch_all(lists, \"New South Wales\") |>\n  select(species_list_uid, listType, isAuthoritative, isThreatened)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 × 4\n  species_list_uid listType          isAuthoritative isThreatened\n  <chr>            <chr>             <lgl>           <lgl>       \n1 dr650            CONSERVATION_LIST TRUE            TRUE        \n2 dr487            SENSITIVE_LIST    TRUE            FALSE       \n```\n\n\n:::\n:::\n\n\n\nWe can return only species in Yass Valley on the New South Wales Conservation Status List (`dr650`) by filtering to `species_list_uid == dr650`. Our query returns 31 species.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyass_threatened <- galah_call() |>\n  galah_filter(species_list_uid == dr650,\n               year == 2023) |>\n  galah_geolocate(yass_valley) |>\n  atlas_species()\n\nyass_threatened\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 11\n   taxon_concept_id       species_name scientific_name_auth…¹ taxon_rank kingdom\n   <chr>                  <chr>        <chr>                  <chr>      <chr>  \n 1 https://biodiversity.… Petroica (P… (Lesson, 1838)         species    Animal…\n 2 https://biodiversity.… Callocephal… (Grant, 1803)          species    Animal…\n 3 https://biodiversity.… Polytelis s… (Desmarest, 1826)      species    Animal…\n 4 https://biodiversity.… Hieraaetus … (Gould, 1841)          species    Animal…\n 5 https://biodiversity.… Petroica (L… Gould, 1837            species    Animal…\n 6 https://biodiversity.… Daphoenosit… (Latham, 1801)         species    Animal…\n 7 https://biodiversity.… Pyrrholaemu… (Latham, 1801)         species    Animal…\n 8 https://biodiversity.… Stagonopleu… (Shaw, 1796)           species    Animal…\n 9 https://biodiversity.… Haliaeetus … (Gmelin, 1788)         species    Animal…\n10 https://biodiversity.… Stictonetta… (Gould, 1841)          species    Animal…\n# ℹ 21 more rows\n# ℹ abbreviated name: ¹​scientific_name_authorship\n# ℹ 6 more variables: phylum <chr>, class <chr>, order <chr>, family <chr>,\n#   genus <chr>, vernacular_name <chr>\n```\n\n\n:::\n:::\n\n\n\nWe can do the same using the New South Wales Sensitive Species (`dr487`). Our query returns 5 species.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyass_sensitive <- galah_call() |>\n  galah_filter(species_list_uid == dr487,\n               year == 2023) |>\n  galah_geolocate(yass_valley) |>\n  atlas_species()\n\nyass_sensitive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 11\n  taxon_concept_id species_name scientific_name_auth…¹ taxon_rank kingdom phylum\n  <chr>            <chr>        <chr>                  <chr>      <chr>   <chr> \n1 https://biodive… Callocephal… (Grant, 1803)          species    Animal… Chord…\n2 https://biodive… Polytelis s… (Desmarest, 1826)      species    Animal… Chord…\n3 https://id.biod… Grevillea i… McGill.                species    Plantae Charo…\n4 https://biodive… Ninox (Rhab… (Gould, 1838)          species    Animal… Chord…\n5 https://id.biod… Prasophyllu… D.L.Jones & R.J.Bates  species    Plantae Charo…\n# ℹ abbreviated name: ¹​scientific_name_authorship\n# ℹ 5 more variables: class <chr>, order <chr>, family <chr>, genus <chr>,\n#   vernacular_name <chr>\n```\n\n\n:::\n:::\n\n\n\nTo return the count of species records, we can group by `species` and end our query with `atlas_counts()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyass_sensitive_counts <- galah_call() |>\n  galah_filter(species_list_uid == dr487,\n               year == 2023) |>\n  galah_geolocate(yass_valley) |>\n  galah_group_by(species) |>\n  atlas_counts()\n\nyass_sensitive_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  species                  count\n  <chr>                    <int>\n1 Callocephalon fimbriatum    97\n2 Polytelis swainsonii        94\n3 Grevillea iaspicula          7\n4 Ninox strenua                5\n5 Prasophyllum petilum         1\n```\n\n\n:::\n:::\n\n\n\n\n# Using external lists\n\nWe can use our own conservation status lists from an external source to compare to our Yass Valley species list. \n\nAs an example, we are using the the New South Wales Conservation Status List and the New South Wales Sensitive Species List[^3].\n\n\n\n{{< downloadthis ../data/example_TSL.csv label=\"Download Conservation Status List\" icon=database-fill-down type=info class=data-button >}} {{< downloadthis ../data/example_SSL.csv label=\"Download Sensitive Species List\" icon=database-fill-down type=info class=data-button >}}\n\n\n\n\n[^3]: These are the same two lists that you can access in galah, available from the Atlas of Living Australia. Keep in mind that if you use an external list, data cleaning may be required before matching species names.\n\nFirst, let's read in both lists and see what each list looks like.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthreatened_list <- read_csv(here(\"path\", \"to\", \"example_TSL.csv\"))\nsensitive_list <- read_csv(here(\"path\", \"to\", \"example_SSL.csv\"))\n```\n:::\n\n::: {.cell}\n\n:::\n\n\n\n\nLet's filter our Yass Valley species to only those that are also in our `threatened_list`. We return 31 species.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyass_threatened <- species_yass |>\n  filter(species_name %in% yass_threatened$species_name)\n\nyass_threatened\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 31 × 11\n   taxon_concept_id       species_name scientific_name_auth…¹ taxon_rank kingdom\n   <chr>                  <chr>        <chr>                  <chr>      <chr>  \n 1 https://biodiversity.… Petroica (P… (Lesson, 1838)         species    Animal…\n 2 https://biodiversity.… Artamus (An… (Latham, 1801)         species    Animal…\n 3 https://biodiversity.… Callocephal… (Grant, 1803)          species    Animal…\n 4 https://biodiversity.… Polytelis s… (Desmarest, 1826)      species    Animal…\n 5 https://biodiversity.… Hieraaetus … (Gould, 1841)          species    Animal…\n 6 https://biodiversity.… Petroica (L… Gould, 1837            species    Animal…\n 7 https://biodiversity.… Daphoenosit… (Latham, 1801)         species    Animal…\n 8 https://biodiversity.… Pyrrholaemu… (Latham, 1801)         species    Animal…\n 9 https://biodiversity.… Stagonopleu… (Shaw, 1796)           species    Animal…\n10 https://biodiversity.… Haliaeetus … (Gmelin, 1788)         species    Animal…\n# ℹ 21 more rows\n# ℹ abbreviated name: ¹​scientific_name_authorship\n# ℹ 6 more variables: phylum <chr>, class <chr>, order <chr>, family <chr>,\n#   genus <chr>, vernacular_name <chr>\n```\n\n\n:::\n:::\n\n\n\nWe can do the same with our `sensitive_list`, which returns 5 species.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyass_sensitive <- species_yass |>\n  filter(species_name %in% yass_sensitive$species_name)\n\nyass_sensitive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 11\n  taxon_concept_id species_name scientific_name_auth…¹ taxon_rank kingdom phylum\n  <chr>            <chr>        <chr>                  <chr>      <chr>   <chr> \n1 https://biodive… Callocephal… (Grant, 1803)          species    Animal… Chord…\n2 https://biodive… Polytelis s… (Desmarest, 1826)      species    Animal… Chord…\n3 https://id.biod… Grevillea i… McGill.                species    Plantae Charo…\n4 https://biodive… Ninox (Rhab… (Gould, 1838)          species    Animal… Chord…\n5 https://id.biod… Prasophyllu… D.L.Jones & R.J.Bates  species    Plantae Charo…\n# ℹ abbreviated name: ¹​scientific_name_authorship\n# ℹ 5 more variables: class <chr>, order <chr>, family <chr>, genus <chr>,\n#   vernacular_name <chr>\n```\n\n\n:::\n:::\n\n\n\n:::\n\n# Visualise species conservation status\n\nOne useful way to visualise the number of threatened and sensitive species in an area is using a waffle chart. Waffle charts are useful because they can show the total number of species (represented as individual square units) and proportions of different groups (represented by colours). \n\nFor example, we can visualse the number and proportion of species with different conservation status, along with a taxonomic breakdown of threatened/sensitive species.\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(waffle)\nlibrary(showtext)\nlibrary(glue)\n\n# Add conservation status & taxa groups for plotting\nspecies_yass_grouped <- species_yass |>\n  mutate(\n    conservation_status = case_when(\n      species_name %in% yass_sensitive$species_name ~ \"Sensitive\",\n      species_name %in% yass_threatened$species_name ~ \"Threatened\",\n      .default = \"No status\"\n    ),\n    taxa_group = case_when(\n      class == \"Aves\" ~ \"Birds\",\n      class == \"Reptilia\" ~ \"Reptiles\",\n      class == \"Mammalia\" ~ \"Mammals\",\n      kingdom == \"Plantae\" ~ \"Plants\",\n      .default = \"Other\"\n    )\n  )\n\n# Count number of species by conservation status\nstatus_table <- species_yass_grouped |>\n  group_by(conservation_status) |>\n  summarise(n = n()) |>\n  mutate(proportion = n/sum(n)*100)\n\n# Count number of species by taxonomic group\ntaxa_table <- species_yass_grouped |>\n  filter(conservation_status %in% c(\"Sensitive\", \"Threatened\")) |>\n  group_by(taxa_group) |>\n  summarise(n = n()) |>\n  mutate(proportion = n/sum(n)*100)\n\n# Extract percentage that are threatened/sensitive species\nprop_threatened_or_sensitive <- status_table |>\n  filter(conservation_status %in% c(\"Sensitive\", \"Threatened\")) |>\n  summarise(total = sum(proportion)) |>\n  pull(total) |>\n  round(2)\n\n# Add nicer font\nfont_add_google(\"Roboto\", \"roboto\")\nshowtext_auto()\n\n# Plot 1 Waffle: Conservation Status\nwaffle_status <- \n  ggplot(status_table) +\n  waffle::geom_waffle(aes(fill = conservation_status,\n                          colour = conservation_status,\n                          values = n),\n                      n_rows = 17,\n                      height = 0.75,\n                      width = 0.75,\n                      size = 1) +\n  scale_colour_manual(name = \"Conservation\\nStatus\",\n                    values = c(\"#F3E6DC\", \"#D89A98\", \"#AB423F\"),\n                    labels = c(\"No status\", \"Sensitive\", \"Threatened\")) +\n  scale_fill_manual(name = \"Conservation\\nStatus\",\n                    values = c(\"#F3E6DC\", \"#D89A98\", \"#AB423F\"),\n                    labels = c(\"No status\", \"Sensitive\", \"Threatened\")) +\n  labs(title = glue::glue(\"{prop_threatened_or_sensitive}% of total species in \\\\\n                          Yass Valley are threatened or sensitive\"),\n       caption = \"1 square = 1 species\") +\n  coord_equal() + \n  theme_void() + \n  theme(legend.position = \"bottom\",\n        text = element_text(family = \"roboto\", lineheight = 0.5),\n        legend.title = element_text(hjust = 0.5, size = 20),\n        legend.text = element_text(size = 19),\n        plot.title = element_text(hjust = 0.5, size = 25),\n        plot.caption = element_text(size = 17),\n        plot.margin = margin(0.5, 1, 0.5, 1, unit = \"cm\"))\n\n# Plot 2: Taxonomic breakdown\nwaffle_taxa <- \n  ggplot(taxa_table) +\n  waffle::geom_waffle(aes(fill = taxa_group,\n                          colour = taxa_group,\n                          values = n),\n                      n_rows = 4,\n                      height = 0.75,\n                      width = 0.75,\n                      size = 1) +\n  scale_colour_manual(name = \"Group\",\n                    values = c(\"#567C7C\", \"#6D714A\", \"#465743\", \"#22352C\", \"#C4AC79\"),\n                    labels = c(\"Birds\", \"Mammals\", \"Other\", \"Plants\", \"Reptiles\")) +\n  scale_fill_manual(name = \"Group\",\n                    values = c(\"#567C7C\", \"#6D714A\", \"#465743\", \"#22352C\", \"#C4AC79\"),\n                    labels = c(\"Birds\", \"Mammals\", \"Other\", \"Plants\", \"Reptiles\")) +\n  labs(title = \"Taxonomic breakdown of threatened & sensitive species\",\n       caption = \"1 square = 1 species\") +\n  coord_equal() + \n  theme_void() + \n  theme(legend.position = \"bottom\",\n        text = element_text(family = \"roboto\"),\n        legend.title = element_text(hjust = 0.5, size = 20),\n        legend.text = element_text(size = 19),\n        plot.title = element_text(hjust = 0.5, size = 25),\n        plot.caption = element_text(size = 17, hjust = 1),\n        plot.margin = margin(0.5, 2.5, 0.5, 2.5, unit = \"cm\"))\n```\n:::\n\n::: {.cell .column-page layout-align=\"center\"}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-29-1.png){fig-align='center' width=1152 style=margin-left:auto;margin-right:auto;}\n:::\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](index_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n# Final thoughts\n\nWe hope this post has helped you understand how to download a species list for a specific area and compare it to conservation lists. It's also possible to compare species with other information like lists of migratory species or seasonal species.\n\nFor other posts, check out [our beginner's guide to map species observations](https://labs.ala.org.au/posts/2023-12-18_beginners-guide-make-a-map/) or see [an investigation of dingo observations in the ALA](https://labs.ala.org.au/posts/2023-05-16_dingoes/).\n\n<details>\n\n<summary style=\"color: #E06E53;\">\n\nExpand for session info\n\n</summary>\n\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n─ Session info ───────────────────────────────────────────────────────────────\n setting  value\n version  R version 4.4.1 (2024-06-14 ucrt)\n os       Windows 10 x64 (build 19045)\n system   x86_64, mingw32\n ui       RTerm\n language (EN)\n collate  English_Australia.utf8\n ctype    English_Australia.utf8\n tz       Australia/Sydney\n date     2024-08-20\n pandoc   3.1.11 @ C:/Program Files/RStudio/resources/app/bin/quarto/bin/tools/ (via rmarkdown)\n\n─ Packages ───────────────────────────────────────────────────────────────────\n package     * version date (UTC) lib source\n dplyr       * 1.1.4   2023-11-17 [1] CRAN (R 4.3.2)\n galah       * 2.0.2   2024-04-12 [1] CRAN (R 4.4.1)\n ggplot2     * 3.5.1   2024-04-23 [1] CRAN (R 4.4.0)\n glue        * 1.6.2   2022-02-24 [1] CRAN (R 4.3.2)\n here        * 1.0.1   2020-12-13 [1] CRAN (R 4.3.2)\n htmltools   * 0.5.7   2023-11-03 [1] CRAN (R 4.3.2)\n ozmaps      * 0.4.5   2021-08-03 [1] CRAN (R 4.3.2)\n readr       * 2.1.5   2024-01-10 [1] CRAN (R 4.3.3)\n rmapshaper  * 0.5.0   2023-04-11 [1] CRAN (R 4.3.2)\n sessioninfo * 1.2.2   2021-12-06 [1] CRAN (R 4.3.2)\n sf          * 1.0-16  2024-03-24 [1] CRAN (R 4.3.3)\n showtext    * 0.9-6   2023-05-03 [1] CRAN (R 4.3.2)\n showtextdb  * 3.0     2020-06-04 [1] CRAN (R 4.3.2)\n sysfonts    * 0.8.8   2022-03-13 [1] CRAN (R 4.3.2)\n waffle      * 1.0.2   2024-05-03 [1] Github (hrbrmstr/waffle@767875b)\n\n [1] C:/Users/KEL329/R-packages\n [2] C:/Users/KEL329/AppData/Local/Programs/R/R-4.4.1/library\n\n──────────────────────────────────────────────────────────────────────────────\n```\n\n\n:::\n:::\n\n\n\n</details>\n\n\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}