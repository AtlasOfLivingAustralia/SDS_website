[
  {
    "path": "posts/style-guide/",
    "title": "Style Guide",
    "description": "New ALA style guide for R Markdown documents",
    "author": [
      {
        "name": "Dax Kellie",
        "url": "https://twitter.com/daxkellie?lang=en"
      }
    ],
    "date": "2021-07-07",
    "categories": [
      "R markdown",
      "guides"
    ],
    "contents": "\r\n\r\nContents\r\nIntroduction\r\nStyle Template\r\nGetting started\r\nUse ALA Template\r\nAdd your information\r\nKnit to HTML\r\n\r\nPush to Github\r\nReproducible workflows\r\nSafe paths\r\n\r\nMake understandable code\r\nCode chunk size\r\nBrief summaries\r\nStyle code using styler\r\n\r\nOutput style\r\nTables\r\nFigures\r\nModel output\r\nCode chunk options\r\nExample: echo and eval\r\n\r\n\r\nCool Distill Things\r\nCode folding\r\n\r\n\r\nIntroduction\r\nThis document details the Atlas of Living Australia style guide for creating html files from R Markdown\r\nStyle Template\r\nA test of a chunk\r\n\r\n\r\nlibrary(kableExtra)\r\nlibrary(tidyverse)\r\n\r\n# a table\r\nhead(mtcars, n=5) %>%\r\n  kbl() %>%\r\n  kable_styling()\r\n\r\n\r\n\r\n\r\n\r\nmpg\r\n\r\n\r\ncyl\r\n\r\n\r\ndisp\r\n\r\n\r\nhp\r\n\r\n\r\ndrat\r\n\r\n\r\nwt\r\n\r\n\r\nqsec\r\n\r\n\r\nvs\r\n\r\n\r\nam\r\n\r\n\r\ngear\r\n\r\n\r\ncarb\r\n\r\n\r\nMazda RX4\r\n\r\n\r\n21.0\r\n\r\n\r\n6\r\n\r\n\r\n160\r\n\r\n\r\n110\r\n\r\n\r\n3.90\r\n\r\n\r\n2.620\r\n\r\n\r\n16.46\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\nMazda RX4 Wag\r\n\r\n\r\n21.0\r\n\r\n\r\n6\r\n\r\n\r\n160\r\n\r\n\r\n110\r\n\r\n\r\n3.90\r\n\r\n\r\n2.875\r\n\r\n\r\n17.02\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\nDatsun 710\r\n\r\n\r\n22.8\r\n\r\n\r\n4\r\n\r\n\r\n108\r\n\r\n\r\n93\r\n\r\n\r\n3.85\r\n\r\n\r\n2.320\r\n\r\n\r\n18.61\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n1\r\n\r\n\r\nHornet 4 Drive\r\n\r\n\r\n21.4\r\n\r\n\r\n6\r\n\r\n\r\n258\r\n\r\n\r\n110\r\n\r\n\r\n3.08\r\n\r\n\r\n3.215\r\n\r\n\r\n19.44\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\nHornet Sportabout\r\n\r\n\r\n18.7\r\n\r\n\r\n8\r\n\r\n\r\n360\r\n\r\n\r\n175\r\n\r\n\r\n3.15\r\n\r\n\r\n3.440\r\n\r\n\r\n17.02\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n2\r\n\r\n\r\nGetting started\r\nUse ALA Template\r\nCreate a new R Markdown document by selecting File –> New File –> R Markdown \r\nIn the left window menu, select New Template. Then select the ALA Template \r\nAdd your information\r\nIn the top 3 lines, add your document title, your name and the date. Leave the remainder of the .yaml options unchanged. \r\nNext, scroll down to the code chunk named “r upper right bio”. This code chunk adds your image and links to your personal websites\r\nSave your preferred picture as “picture.jpg” in the current directory\r\nAdd the urls you wish to link to for the correct websites & icons\r\n\r\n\r\nKnit to HTML\r\nClick the Knit button in the upper menu (below file tabs, above script) to create an HTML file. A preview of your knitted HTML document can be viewed in the right pane. Code must run successfully from start to finish for a file to be Knit. \r\nIn the R Studio viewer pane, click the “Show in New Window ” button to view the page in your browser.\r\n\r\nPush to Github\r\n\r\nReproducible workflows\r\nSafe paths\r\nUsing setwd() to set a working directory can create issues for folder paths. They often are a cause of issues when making reproducible workflows. \r\nInstead, use the here() function from the here package to build the path where you read and write files. here() automatically creates paths relative to the top level directory.\r\nRead a full description of how to use the here() function to create safe paths in Chapter 3 of What They Forgot to Teach You About R\r\nFor example:\r\n\r\n\r\nlibrary(ggplot2)\r\nlibrary(here)\r\n\r\ndf <- read.delim(here(\"projects\", , \"style_guide\", \"data.csv\"))\r\np <- ggplot(df, aes(x, y)) + geom_point()\r\nggsave(here(\"plots\", \"foofy_scatterplot.png\"))\r\n\r\n\r\n\r\nTo set the project root path according to your current code file:\r\n\r\n\r\nhere::i_am(\"style_guide.rmd\")\r\n\r\n\r\n\r\nMake understandable code\r\nCode chunk size\r\nIn writing, we use sentences and paragraphs of varying lengths to build a flowing, logical story or argument. In the same way, code chunks can be used to structure lines of code to build a flowing, logical analysis or plot. \r\nCode chunks should be brief. They should also offer notes or visual output that provides context to any transformations or outputs. Users should be able to follow each transformation that is made to your data, each output that results from a transformation, and any final output. \r\nThere is no single correct code chunk size - you must use your best judgement. If it seems that the result of one or several lines of code is unclear a potential reader, you may need to split the code chunks to make the results easier to follow. \r\nBrief summaries\r\nFor others to understand what your code does and why you made the choices you did, it is helpful to include brief summaries or your logic or what each line of your code does. It is also good to provide a brief interpretation of model output \r\nStyle code using styler\r\nUse the styler package to ensure your code is formatted correctly and/or consistently, The styler package formats your code according to the tidyverse style guide (or another custome style) prior to uploading a finished file document. \r\nSee the styler github and tidyverse pages for more information \r\nInstall the styler package to add style buttons to your R Markdown Addins dropdown menu. Clicking Addins -> style active file will reformat the code in your active file. Clicking ** Addins** -> style active section will reformat code in your current section. \r\nAlternatively, you style_file() or style_text() can be run in the console. \r\nOutput style\r\nSee the R Markdown cheat sheet for more information on R Markdown formatting \r\nFor tips to make your R Markdown output pretty, see Pimp my RMD by Yan Holtz \r\nTables\r\nSeveral packages can create tables with nice formatting.\r\nOne example is kableExtra:\r\n\r\n\r\nlibrary(kableExtra)\r\nkable(\r\n  head(mtcars, n=5)) %>% kable_styling()\r\n\r\n\r\n\r\n\r\n\r\nmpg\r\n\r\n\r\ncyl\r\n\r\n\r\ndisp\r\n\r\n\r\nhp\r\n\r\n\r\ndrat\r\n\r\n\r\nwt\r\n\r\n\r\nqsec\r\n\r\n\r\nvs\r\n\r\n\r\nam\r\n\r\n\r\ngear\r\n\r\n\r\ncarb\r\n\r\n\r\nMazda RX4\r\n\r\n\r\n21.0\r\n\r\n\r\n6\r\n\r\n\r\n160\r\n\r\n\r\n110\r\n\r\n\r\n3.90\r\n\r\n\r\n2.620\r\n\r\n\r\n16.46\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\nMazda RX4 Wag\r\n\r\n\r\n21.0\r\n\r\n\r\n6\r\n\r\n\r\n160\r\n\r\n\r\n110\r\n\r\n\r\n3.90\r\n\r\n\r\n2.875\r\n\r\n\r\n17.02\r\n\r\n\r\n0\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n4\r\n\r\n\r\nDatsun 710\r\n\r\n\r\n22.8\r\n\r\n\r\n4\r\n\r\n\r\n108\r\n\r\n\r\n93\r\n\r\n\r\n3.85\r\n\r\n\r\n2.320\r\n\r\n\r\n18.61\r\n\r\n\r\n1\r\n\r\n\r\n1\r\n\r\n\r\n4\r\n\r\n\r\n1\r\n\r\n\r\nHornet 4 Drive\r\n\r\n\r\n21.4\r\n\r\n\r\n6\r\n\r\n\r\n258\r\n\r\n\r\n110\r\n\r\n\r\n3.08\r\n\r\n\r\n3.215\r\n\r\n\r\n19.44\r\n\r\n\r\n1\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n1\r\n\r\n\r\nHornet Sportabout\r\n\r\n\r\n18.7\r\n\r\n\r\n8\r\n\r\n\r\n360\r\n\r\n\r\n175\r\n\r\n\r\n3.15\r\n\r\n\r\n3.440\r\n\r\n\r\n17.02\r\n\r\n\r\n0\r\n\r\n\r\n0\r\n\r\n\r\n3\r\n\r\n\r\n2\r\n\r\n\r\nkableExtra is also able to be used using magittr or base piping:\r\n\r\n\r\nmtcars %>% \r\n  group_by(gear) %>% \r\n  summarise(cyl = mean(cyl),\r\n            disp = mean(disp)) %>%\r\n  kbl() %>%\r\n  kable_styling()\r\n\r\n\r\n\r\ngear\r\n\r\n\r\ncyl\r\n\r\n\r\ndisp\r\n\r\n\r\n3\r\n\r\n\r\n7.466667\r\n\r\n\r\n326.3000\r\n\r\n\r\n4\r\n\r\n\r\n4.666667\r\n\r\n\r\n123.0167\r\n\r\n\r\n5\r\n\r\n\r\n6.000000\r\n\r\n\r\n202.4800\r\n\r\n\r\n\r\n\r\nhead(mtcars |>\r\n  subset(select = c(\"cyl\", \"disp\", \"gear\")), n = 5) |>\r\n  kbl() |>\r\n  kable_styling()\r\n\r\n\r\n\r\nFigures\r\nControlling the size of figures can help when you want people to focus on trends of many plots or on details of a single plot. \r\nYou can control how many columns your plots created in a chunk are printed into.\r\nAdd out.width = c(\"50%\", \"50%\"), fig.show = \"hold\":\r\n\r\n``{r out.width=c('50%', '50%'), fig.show='hold'}\r\nboxplot(1:10)\r\nplot(rnorm(10))\r\n`\r\n\r\n\r\n\r\n\r\nControl other parts of figure output in the chunk header as well. For example:\r\n\r\n``{r, fig.align=\"center\", fig.width=6, fig.height=6, fig.cap=\"Figure: Here is a really important caption.\"}\r\n\r\n\r\n\r\nlibrary(tidyverse)\r\nmpg %>%\r\n  ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) + \r\n    geom_boxplot() +\r\n    xlab(\"class\") +\r\n    theme(legend.position=\"none\")\r\n\r\n\r\n\r\n\r\nFigure 1: Figure: Here is a really important caption.\r\n\r\n\r\n\r\nModel output\r\nRun a model and want to show output? Use the model_parameters() function from the parameters package to make your output clear and organised. The model_parameters() function can be considered as a lightweight alternative to broom::tidy():\r\n\r\n\r\nlibrary(parameters)\r\nmodel <- lm(Sepal.Width ~ Petal.Length * Species + Petal.Width, data = iris)\r\n\r\n# regular model parameters\r\nmodel_parameters(model)\r\n\r\n\r\nParameter                           | Coefficient |   SE |         95% CI | t(143) |      p\r\n-------------------------------------------------------------------------------------------\r\n(Intercept)                         |        2.89 | 0.36 | [ 2.18,  3.60] |   8.01 | < .001\r\nPetal.Length                        |        0.26 | 0.25 | [-0.22,  0.75] |   1.07 | 0.287 \r\nSpecies [versicolor]                |       -1.66 | 0.53 | [-2.71, -0.62] |  -3.14 | 0.002 \r\nSpecies [virginica]                 |       -1.92 | 0.59 | [-3.08, -0.76] |  -3.28 | 0.001 \r\nPetal.Width                         |        0.62 | 0.14 | [ 0.34,  0.89] |   4.41 | < .001\r\nPetal.Length * Species [versicolor] |       -0.09 | 0.26 | [-0.61,  0.42] |  -0.36 | 0.721 \r\nPetal.Length * Species [virginica]  |       -0.13 | 0.26 | [-0.64,  0.38] |  -0.50 | 0.618 \r\n\r\nmodel_parameters() can also be used for parameter standardization:\r\n\r\n\r\n# standardized parameters\r\nmodel_parameters(model, standardize = \"refit\")\r\n\r\n\r\nPackage 'effectsize' required to calculate standardized coefficients. Please install it.\r\nParameter                           | Coefficient |   SE |         95% CI | t(143) |      p\r\n-------------------------------------------------------------------------------------------\r\n(Intercept)                         |        2.89 | 0.36 | [ 2.18,  3.60] |   8.01 | < .001\r\nPetal.Length                        |        0.26 | 0.25 | [-0.22,  0.75] |   1.07 | 0.287 \r\nSpecies [versicolor]                |       -1.66 | 0.53 | [-2.71, -0.62] |  -3.14 | 0.002 \r\nSpecies [virginica]                 |       -1.92 | 0.59 | [-3.08, -0.76] |  -3.28 | 0.001 \r\nPetal.Width                         |        0.62 | 0.14 | [ 0.34,  0.89] |   4.41 | < .001\r\nPetal.Length * Species [versicolor] |       -0.09 | 0.26 | [-0.61,  0.42] |  -0.36 | 0.721 \r\nPetal.Length * Species [virginica]  |       -0.13 | 0.26 | [-0.64,  0.38] |  -0.50 | 0.618 \r\n\r\n\r\nCode chunk options\r\nSee the R markdown documentation to view chunk options. \r\nExample: echo and eval\r\nReaders should be able to identify where every file in a workflow comes from (little is more frustrating than wondering where a required data file is located). Code used to load or extract data (from galah, for example) should be clearly identified. \r\nHowever, some code takes a very long time to run and you may have saved it locally or in a repository to save time and/or space. In this case, it is possible to show code without running it. \r\nAdd eval = FALSE to the chunk header to display the code but prevent the chunk from running:\r\n\r\n``{r, eval = FALSE}\r\nala_counts(group_by = \"phylum\")\r\n`\r\n\r\nYou can then load a local file in the background, without showing the code. \r\nAdd echo = FALSE to your chunk header to run the code but prevent the chunk from displaying:\r\n\r\n``{r, echo = FALSE}\r\ndata <- readRDS(file = \"local_file.rds\")\r\n`\r\n\r\nCool Distill Things\r\nCode folding\r\nDoes a plot require a lot of code that distracts from the plot itself? Distill has a really nice code folding feature:\r\n\r\n\r\nShow code\r\n\r\nlibrary(galah)\r\nlibrary(data.table)\r\nlibrary(dtplyr) # provides data.table backend for dplyr\r\nlibrary(tidyverse)\r\nlibrary(lubridate) # for dates\r\nlibrary(ggpubr)\r\n\r\n# Might need to config email to get ALA data\r\nala_config(email = \"dax.kellie@csiro.au\")\r\n\r\n\r\n# Get records\r\noccurrences_Tas <- ala_occurrences(filters = select_filters(stateProvince = \"Tasmania\",\r\n                                               year = seq(2018, 2020),\r\n                                               basisOfRecord = \"HumanObservation\"))\r\noccurrences_Tas <- setDT(occurrences_Tas) # make data.table\r\n\r\n\r\n\r\n\r\n\r\nShow code\r\n\r\n# date format\r\noccurrences_Tas$eventDate <- as_date(occurrences_Tas$eventDate)\r\n\r\n# Wrangling\r\noccurrences_Tas <- occurrences_Tas %>%\r\n  mutate(\r\n    month = month(eventDate, label = TRUE), # add month col\r\n    year = year(eventDate)                  # add year col\r\n  ) %>%\r\n  filter(!is.na(eventDate)) %>%             # remove NAs\r\n  as.data.table()\r\n# any(is.na(occurrences_Tas$day))\r\n\r\n# get month counts\r\nmonth_counts <- occurrences_Tas[, .N, by = c(\"month\")]\r\nmonth_counts$month <- ordered(factor(month_counts$month,\r\n  levels = c(\r\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\r\n    \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\r\n  )\r\n))\r\n\r\nggdotchart(month_counts,\r\n  x = \"month\", y = \"N\",\r\n  color = \"month\", # Color by groups\r\n  palette = \"viridis\", # Custom color palette\r\n  sorting = \"none\", # Sort value in descending order\r\n  add = \"segments\", # Add segments from y = 0 to dots\r\n  legend = \"none\",\r\n  rotate = FALSE,\r\n  dot.size = 4,\r\n  add.params = list(color = \"month\", size = 1),\r\n  title = \"Records added to ALA by month (2018-2020)\",\r\n  ylab = \"Number of records\",\r\n  xlab = \"Month\",\r\n  ggtheme = theme_pubr() # ggplot2 theme\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n",
    "preview": "posts/style-guide/distill-preview.png",
    "last_modified": "2021-07-07T13:37:32+10:00",
    "input_file": {}
  },
  {
    "path": "posts/test/",
    "title": "Test",
    "description": "A new article created using the Distill format.",
    "author": [
      {
        "name": "Nora Jones",
        "url": "https://example.com/norajones"
      }
    ],
    "date": "2021-07-06",
    "categories": [
      "R markdown",
      "test"
    ],
    "contents": "\r\nDistill is a publication format for scientific and technical writing, native to the web.\r\nLearn more about using Distill for R Markdown at https://rstudio.github.io/distill.\r\n\r\n\r\n\r\n",
    "preview": {},
    "last_modified": "2021-07-06T13:25:46+10:00",
    "input_file": {}
  }
]
