[
  {
    "path": "posts/2021-04-14_hex-maps-for-species-occurrence-data/",
    "title": "Hex maps for species occurrence data",
    "description": "Hex maps are a neat way to represent spatial information. Here, we \nshow how to draw one using the most common species in the ALA database: \nthe iconic Australian Magpie.",
    "author": [
      {
        "name": "Matilda Stevenson",
        "url": {}
      }
    ],
    "date": "2022-02-25",
    "categories": [
      "Maps",
      "Eukaryota",
      "Animalia",
      "Chordata",
      "Aves"
    ],
    "contents": "\n\nContents\nGetting species occurrences\nPlotting binned data\n\n\n\n\n/* Remove distill metadata section */\nd-byline {\n    display: none;\n  }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAuthor:\n\nMatilda Stevenson, Martin Westgate, Dax Kellie\n\n\nDate:\n\n25 February, 2022\n\n\n\n\n\nThe Atlas of Living Australia (ALA) holds records of magpie sightings from a number data providers like iNaturalist, eBird and BirdLife Australia. Let’s make a visualisation of Australian Bird of the Year 2018 winner, Magpies, using records held in the ALA.\nGetting species occurrences\nAs with any R project, a good first step is to load the required packages\n\n\n# packages\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ozmaps)\nlibrary(sf)\nlibrary(hexbin)\n\n\n\nWe will use the {galah} package to download records.\nTo download species occurrence records, the {galah} package requires you to add an email registered with the ALA to galah_config(). If running this code yourself, you will need to add an email using the code below, substituting your email with myemail@email.com. This email address should be registered with the ALA, which you can do here\n\n\nlibrary(galah)\ngalah_config(email = \"myemail@email.com\")\n\n\n\nNow we can download magpie occurrence records by using atlas_occurrences(). Note that we also set our data ‘profile’ to ‘ALA’; this means we only download records that meet some basic data quality standards enforced by the atlas. This is optional, but tends to improve the quality of the data returned. (If you wish to see the data quality filters applied in the ALA profile, use search_profile_attributes(\"ALA\"))\n\n\nmagpie_occ <- galah_call() %>%\n  galah_identify(\"Cracticus tibicen\") %>%\n  galah_filter(profile = \"ALA\") %>%\n  atlas_occurrences()\n\n\n\nLet’s have a look at the first few rows of the data we’ve just downloaded:\n\n\nmagpie_occ %>% head()\n\n\n# A tibble: 6 x 7\n  decimalLatitude decimalLongitude eventDate            scientificName\n            <dbl>            <dbl> <chr>                <chr>         \n1           -45.0             169. \"\"                   Gymnorhina ti~\n2           -44.5             170. \"2018-10-27T21:44:0~ Gymnorhina ti~\n3           -44.1             170. \"2019-05-02T05:18:0~ Gymnorhina ti~\n4           -43.6             147. \"\"                   Gymnorhina ti~\n5           -43.6             147. \"\"                   Gymnorhina ti~\n6           -43.6             147. \"\"                   Gymnorhina ti~\n# ... with 3 more variables: taxonConceptID <chr>, recordID <chr>,\n#   dataResourceName <chr>\n\nFor the purpose of this exercise, we’re going to filter records not on the mainland or Tasmania.\n\n\nfiltered_occ <- magpie_occ %>% filter(decimalLongitude < 155,\n                                      decimalLongitude > 110,\n                                      decimalLatitude > -45,\n                                      decimalLatitude < -10)\n\n\n\nPlotting binned data\nThe easiest way to create a hex map is using the hexbin package\n\n\nggplot(filtered_occ) +\n  geom_hex(mapping = aes(x = decimalLongitude, y = decimalLatitude), \n           bins = 47, \n           colour = \"white\") +\n  ylim(-45, -10) +\n  xlim(110, 155) +\n  scale_fill_gradientn(colours = c(\"#EEECEA\", \"#E06E53\")) +\n  coord_fixed() +\n  theme_bw() +\n  theme(\n    panel.border = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    legend.position = \"none\")\n\n\n\n\nWhile automated methods are nice, it might sometimes be useful to create our hexagons manually. We can do this by manually creating hexagons, linking them to a grid of Australia, and adding our data of magpie counts to set the fill color of those hexagons. To achieve this, we first convert the map of Australia provided by ozmaps to the same coordinate system as ALA data:\n\n\naus <- st_transform(ozmaps::ozmap_country, 4326)\n\n\n\nWe then transform points from our data frame of magpie occurrences to the correct coordinates\n\n\npoints <- lapply(1:nrow(filtered_occ), function(x) {\n  st_point(c(as.numeric(filtered_occ[x,'decimalLongitude']),\n                        as.numeric(filtered_occ[x,'decimalLatitude'])))\n})\n\n\n\nNow build the hexagonal grid\n\n\ngrid_all <- st_make_grid(aus, cellsize = 1, what = \"polygons\", square = FALSE)[aus]\ngridSF <- st_as_sf(grid_all)\n\n# Find which polygon each point is in\nintersect <- st_intersects(st_as_sfc(points) %>% st_set_crs(4326), gridSF)\n\n# count the number of points in each hexagon\nfreqs <- as.data.frame(table(unlist(intersect)), stringsAsFactors = FALSE)\n\nnames(freqs) <- c(\"hex_id\", \"count\")\n\n\n\nAdd our magpie counts data to the hexagons and fill hexagons without data\n\n\nfreqs$hex_id <- as.integer(freqs$hex_id)\n\n# fill in the values for hexagons with no records\nfilled_freqs <- freqs %>%\n  complete(hex_id = full_seq(c(1,925), 1), fill = list(count = 0))\ngridSF$n <- filled_freqs$count\n\n\n\nFinally, build the plot\n\n\nggplot() +\n  geom_sf(data = gridSF, aes(fill = n), size = .01) +\n  scale_fill_gradientn(colours = c(\"#EEECEA\", \"#E06E53\"), na.value = \"white\", trans = \"log2\") +\n  ylim(-45, -10) +\n  xlim(110, 155) +\n  theme_bw() +\n  theme(\n    panel.border = element_blank(),\n    panel.grid.major = element_blank(),\n    panel.grid.minor = element_blank(),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    axis.title = element_blank(),\n    legend.position = \"none\") \n\n\n\n\nThat’s it! All the extra work does make a difference in this case, providing a better representation of the spread of Mapgies across Australia. Manually constructing hex maps can be useful in other circumstances, too. For example, if we wanted to compare the number of magpies to contextual information within each polygon (such as rainfall or human population data), then manually constructing our own hexagons could help us to combine data from different sources.\nA final point is that we could have achieved the same result by creating polygons first, then querying the ALA for the number of magpie records in each polygon using galah_geolocate(). That’s a bit more challenging, and not worthwhile in this case; but it can be an efficient solution where you require information on more species than there are polygons, for example. We’ll come back to this point in a future blog post.\n\n\n\n",
    "preview": "posts/2021-04-14_hex-maps-for-species-occurrence-data/distill-preview.png",
    "last_modified": "2022-03-24T12:27:41+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2022-02-17_sunburst-plots-for-taxonomic-data/",
    "title": "Sunburst plots for taxonomic data",
    "description": "Since version 1.3.1 of `galah`, it has been possible to download taxonomic\ndata using a 'tree' format from the `data.tree` package. Here I'll demonstrate\nsome ideas for plotting these trees using circular diagrams.",
    "author": [
      {
        "name": "Martin Westgate",
        "url": {}
      }
    ],
    "date": "2022-02-17",
    "categories": [
      "Trees",
      "Eukaryota",
      "Animalia",
      "Chordata"
    ],
    "contents": "\n\nContents\nDownloading taxonomic trees\nGetting plot-ready data\nDrawing\n\n\n\n\n\n\nd-byline {\n    display: none;\n  }\n\n\n\n\n\n\n\n\n\n\n\nAuthor:\n\nMartin Westgate\n\n\nDate:\n\n17 February, 2022\n\n\n\n\n\nTaxonomy is pretty important at the ALA. Every occurrence record in the atlas is linked to a unique taxonomic identifier. These identifiers are themselves drawn from expertly curated taxonomic datasets. This system of classification is so important to our infrastructure that we have a special name for it; the ‘taxonomic backbone’. But what does it look like?\nVisualising trees is not particularly easy for me; I didn’t train in it, and the data structures involved can be a bit complex. More importantly, until recently it was difficult to download detailed taxonomic information from the ALA. Since version 1.3.1 of galah, however, it has been possible to download taxonomic trees using the atlas_taxonomy() function. Let’s have a go at visualising these trees now.\nDownloading taxonomic trees\nThe first step is to choose a taxonomic group to represent in tree form. I’ve chosen the chordates (Phylum Chordata) because they aren’t too large a group and the names are fairly well-known. We can specify this within galah using the function galah_identify. The second piece of information we need to supply is how far ‘down’ the tree to travel. I’ve chosen the Order level here using galah_down_to(order); while we could have gone to the Family or even Genus, trying to traverse too many levels (i.e. to Genus or Species) would take a very long time. A full list of accepted ranks can be found by calling show_all_ranks().\n\n\nlibrary(galah)\nchordate_orders <- galah_call() |>\n  galah_identify(\"chordata\") |>\n  galah_down_to(order) |>\n  atlas_taxonomy()\n\n\n\nThe object returned by atlas_taxonomy is slightly unusual; it uses the data.tree package, meaning that the dataset is literally structured like a tree. This is notably different from other representations of networks, such as you might find in igraph, for example. To get an idea of what the data look like, we can use the inbuilt print method for this data type:\n\n\nlibrary(data.tree)\nprint(chordate_orders, pruneMethod = \"dist\", limit = 10)\n\n\n                            levelName\n1  Chordata                          \n2   ¦--Cephalochordata               \n3   ¦   °--Amphioxi                  \n4   ¦       °--... 1 nodes w/ 0 sub  \n5   ¦--Tunicata                      \n6   ¦   ¦--Appendicularia            \n7   ¦   ¦   °--... 1 nodes w/ 0 sub  \n8   ¦   ¦--Ascidiacea                \n9   ¦   ¦   °--... 5 nodes w/ 0 sub  \n10  ¦   °--Thaliacea                 \n11  ¦       °--... 3 nodes w/ 0 sub  \n12  °--Vertebrata                    \n13      ¦--Agnatha                   \n14      ¦   °--... 2 nodes w/ 2 sub  \n15      °--Gnathostomata             \n16          °--... 5 nodes w/ 134 sub\n\nThis shows there are three nodes directly beneath Chordata in the taxonomic hierarchy, of which the largest (by number of sub-nodes) is the vertebrates (Vertebrata). There is a lot we could do with this tree; each node contains a unique taxonomic identifer, for example, meaning that we could use individual nodes to make new queries using galah. However, for now a useful task is simply to visualise the structure of the whole tree.\nGetting plot-ready data\nTaxonomic trees are complex. While all species have a Kingdom, Phylum, Order, Class and Family, there are many intermediate categories that are ‘optional’. In practice, this means that when we convert to a data.frame for plotting, there are a lot of missing values; nodes that apply to some rows but not others.\n\n\ndf_rank <- ToDataFrameTypeCol(chordate_orders, type = \"rank\")\ndf_rank[10:20,]\n\n\n   rank_phylum rank_subphylum rank_class           rank_informal\n10    Chordata       Tunicata  Thaliacea                    <NA>\n11    Chordata     Vertebrata       <NA>         Myxini, Agnatha\n12    Chordata     Vertebrata       <NA> Petromyzontida, Agnatha\n13    Chordata     Vertebrata   Amphibia           Gnathostomata\n14    Chordata     Vertebrata   Amphibia           Gnathostomata\n15    Chordata     Vertebrata   Amphibia           Gnathostomata\n16    Chordata     Vertebrata       Aves           Gnathostomata\n17    Chordata     Vertebrata       Aves           Gnathostomata\n18    Chordata     Vertebrata       Aves           Gnathostomata\n19    Chordata     Vertebrata       Aves           Gnathostomata\n20    Chordata     Vertebrata       Aves           Gnathostomata\n   rank_subclass rank_superorder rank_subinfraclass rank_infraclass\n10          <NA>            <NA>               <NA>            <NA>\n11          <NA>            <NA>               <NA>            <NA>\n12          <NA>            <NA>               <NA>            <NA>\n13  Lissamphibia            <NA>               <NA>            <NA>\n14          <NA> Labyrinthodonta               <NA>            <NA>\n15          <NA>       Salientia               <NA>            <NA>\n16    Neognathae            <NA>               <NA>            <NA>\n17    Neognathae            <NA>               <NA>            <NA>\n18 Palaeognathae            <NA>            Ratitae            <NA>\n19 Palaeognathae            <NA>            Ratitae            <NA>\n20          <NA>            <NA>               <NA>            <NA>\n   rank_subdivision zoology         rank_order\n10                     <NA>            Salpida\n11                     <NA>       Myxiniformes\n12                     <NA> Petromyzontiformes\n13                     <NA>              Anura\n14                     <NA>      Temnospondyli\n15                     <NA>       Sphenodontia\n16                     <NA>   Accipititrifomes\n17                     <NA>    Phaethontifomes\n18                     <NA>      Casuariifomes\n19                     <NA>   Dinornithiformes\n20                     <NA>       Anseriformes\n\nThese missing values will show up as empty sections in the resulting diagram, which isn’t ideal. Instead, we can build this data.frame so as to place all nodes in order by row, with empty ‘levels’ being placed at the end. This also avoids the problem where ‘unnamed’ ranks are grouped in the same column. To achieve this, we simply choose a different node attribute (level in this case) to supply to the type argument.\n\n\ndf_level <- ToDataFrameTypeCol(chordate_orders, type = \"level\")\ndf_level[10:20, ]\n\n\n    level_1    level_2       level_3        level_4\n10 Chordata   Tunicata     Thaliacea        Salpida\n11 Chordata Vertebrata       Agnatha         Myxini\n12 Chordata Vertebrata       Agnatha Petromyzontida\n13 Chordata Vertebrata Gnathostomata       Amphibia\n14 Chordata Vertebrata Gnathostomata       Amphibia\n15 Chordata Vertebrata Gnathostomata       Amphibia\n16 Chordata Vertebrata Gnathostomata           Aves\n17 Chordata Vertebrata Gnathostomata           Aves\n18 Chordata Vertebrata Gnathostomata           Aves\n19 Chordata Vertebrata Gnathostomata           Aves\n20 Chordata Vertebrata Gnathostomata           Aves\n              level_5          level_6          level_7 level_8\n10               <NA>             <NA>             <NA>    <NA>\n11       Myxiniformes             <NA>             <NA>    <NA>\n12 Petromyzontiformes             <NA>             <NA>    <NA>\n13       Lissamphibia            Anura             <NA>    <NA>\n14    Labyrinthodonta    Temnospondyli             <NA>    <NA>\n15          Salientia     Sphenodontia             <NA>    <NA>\n16         Neognathae Accipititrifomes             <NA>    <NA>\n17         Neognathae  Phaethontifomes             <NA>    <NA>\n18      Palaeognathae          Ratitae    Casuariifomes    <NA>\n19      Palaeognathae          Ratitae Dinornithiformes    <NA>\n20       Anseriformes             <NA>             <NA>    <NA>\n\nAnother problem in this dataset is the existence of duplicated taxonomic names. This happens because different authorities place the same taxon in different parts of the tree, and while the ALA tries to clean up these issues, some disagreements remain. The code below assumes that each name is only present once, so we have to remove duplicates to proceed. Fortunately there is a function in package base that flags duplcated values as TRUE and unique values as FALSE. We can use this function to identify rows where order is not unique.\n\n\nlibrary(dplyr)\nkeep_rows <- !duplicated(df_rank$rank_order)\ndf_rank <- filter(df_rank, keep_rows)\ndf_level <- filter(df_level, keep_rows)\n\n\n\nThe next step is to determine how to represent this structure in a plot. At the moment we can’t do this, because the data are in ‘wide’ format. Instead, we need to reorder our data so that each node/taxon is represented once, and other plotting aesthetics can be added as additional columns. To achieve this, we first convert to ‘long’ format, preserving information like what row and column each taxonomic label was recorded in.\n\n\ndf_long <- tibble(\n  row = rep(seq_len(nrow(df_level)), ncol(df_level)),\n  level = rep(seq_len(ncol(df_level)), each = nrow(df_level)),\n  taxon = do.call(c, df_level)) |> \n  filter(!is.na(taxon)) # remove missing values\n\n\n\nThen, we can summarize this plot so that each row is a single taxon, recording some metadata about rows and columns from the original dataset\n\n\ndf_plot <- df_long |>\n  group_by(taxon) |>\n  summarize(\n    xmin = min(row) - 1, \n    xmax = max(row), \n    ymin = level[1] - 1,\n    ymax = level[1])\n     \ndf_plot\n\n\n# A tibble: 161 x 5\n   taxon             xmin  xmax  ymin  ymax\n   <chr>            <dbl> <int> <dbl> <int>\n 1 Acanthopterygii     66    79     6     7\n 2 Accipititrifomes    15    16     5     6\n 3 Accipitriformes     21    22     4     5\n 4 Actinopterygii      56    96     4     5\n 5 Agnatha             10    12     2     3\n 6 Albuliformes        62    63     6     7\n 7 Amphibia            12    15     3     4\n 8 Amphioxi             0     1     2     3\n 9 Amphioxiformes       0     1     3     4\n10 Anguilliformes      63    64     6     7\n# ... with 151 more rows\n\nDrawing\nOur dataset now contains all the information we need to plot the structure of our taxonomic tree. As usual, we’re going to plot this with ggplot2.\n\n\nlibrary(ggplot2)\nggplot(df_plot) +\n  geom_rect(\n    mapping = aes(\n      xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, \n      group = taxon,\n      fill = ymax),\n    color = \"white\")\n\n\n\n\nWhile this is (probably) accurate, it’s not very informative. The most obvious missing element is labels; to add these, we’ll need to determine which nodes are ‘leaves’, and which are ‘branches’. We’ll also want to restrict labelling to larger branches, to avoid the text looking crowded. Finally, there is no need to label leaves with both a rectangle and text; so we’ll remove the leaf rectangles from the plot.\n\n\ndf_plot <- df_plot |> mutate(\n  x_dist = xmax - xmin,\n  is_leaf = taxon %in% df_rank$rank_order)\n\np <- ggplot() +\n  geom_rect(\n    data = filter(df_plot, !is_leaf),\n    mapping = aes(\n      xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax, \n      group = taxon,\n      fill = ymax),\n    color = \"white\")\n\np +\n  # branch labels\n  geom_text(\n    data = filter(df_plot, x_dist > 5),\n    mapping = aes(\n      x = xmin + (x_dist * 0.5), \n      y = ymin + 0.5,\n      label = taxon),\n    color  = \"white\",\n    size = 3) +\n  # leaf labels\n  geom_text(\n    data = filter(df_plot, is_leaf),\n    aes(x = xmin + 0.5, y = ymin, label = taxon),\n    angle = 90,\n    hjust = 0,\n    size = 2.5,\n    color = \"grey20\") \n\n\n\n\nThis is better, but not ideal. A much more pleasing look is to use coord_polar() to generate a circular plot; but this leads to linear text on a circular plot, which looks messy. Fortunately, the new package geomtextpath solves this problem. All we have to do is replace geom_text with geom_textpath, leaving all other code the same, and add coord_polar() at the end.\n\n\nlibrary(geomtextpath)\n\np <- p + \n  geom_textpath(\n    data = filter(df_plot, x_dist > 5),\n    mapping = aes(\n      x = xmin + (x_dist * 0.5), \n      y = ymin + 0.5,\n      label = taxon),\n    color  = \"white\",\n    size = 2.7) +\n  geom_textpath(\n    data = filter(df_plot, is_leaf),\n    aes(x = xmin + 0.5, y = ymin, label = taxon),\n    angle = 90,\n    hjust = 0,\n    size = 2.3,\n    color = \"grey20\") +\n  coord_polar()\np\n\n\n\n\nFinally, we can add some finishing touches by changing the color scheme, hiding the background colors and legend, and resizing the y axis so all the labels are visible.\n\n\nlibrary(viridis)\n\np +\n  scale_fill_viridis(begin = 0, end = 0.9, direction = -1) +\n  lims(y = c(0, 9)) +\n  theme_void() + \n  theme(legend.position = \"none\")\n\n\n\n\nDone! This is a fun plot, but there are ways it could be expanded or improved, the most obvious of which is to find ways to add supplementary information. Wouldn’t it be great, for example, to add leaf-level record counts as marginal barplots? Or scale the size of segments to the number of records, rather than the number of clades? While none of these are impossible, I’m going to leave this here for now. I hope you like the result!\n\n\n\n",
    "preview": "posts/2022-02-17_sunburst-plots-for-taxonomic-data/distill-preview.png",
    "last_modified": "2022-03-24T12:28:09+11:00",
    "input_file": {}
  },
  {
    "path": "posts/2021-03-20_creating-a-color-palette-from-an-image/",
    "title": "Creating a color palette from an image",
    "description": "There are hundreds of color palettes in the R ecosystem, but sometimes we\nmight want to use colors from a specific image. Here I show how to \nuse the `paletter` package to create a color palette for the 2020 Eucalypt of \nthe Year: the Western Australian Gimlet.",
    "author": [
      {
        "name": "Martin Westgate",
        "url": {}
      }
    ],
    "date": "2021-03-20",
    "categories": [
      "Summaries",
      "Eukaryota",
      "Plantae"
    ],
    "contents": "\n\nContents\nColors in R\nExtracting colors\nCreating a plot\n\n\n\n\n\nd-byline {\n    display: none;\n  }\n\n\n\n\n\n\n\n\n\nAuthor:\n\nMartin Westgate\n\nDate:\n\nMarch 2021\n\n\n\nColors in R\nColor palettes are important to people, and the R ecosystem includes literally hundreds of possible palettes. If you want a “complete” list, go and check out Emil Hvitfeldt’s list of palettes here; but in practice there are only a few that we use routinely. Our default at ALA labs is to use viridis for continuous scales, because (to quote their CRAN page) it’s color-blind friendly, perceptually uniform, and pretty. The default purple-green-yellow color scheme is lovely, but I’m a big fan of ‘magma’, which has a black-purple-orange-yellow scheme\n\n\nlibrary(galah)\nlibrary(ggplot2)\nlibrary(viridis)\n\nrecords <- ala_counts(group_by = \"cl22\")\nrecords$State <- factor(seq_len(nrow(records)), labels = records$cl22) \n\nggplot(records, aes(x = State, y = log10(count), fill = count)) + \n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_fill_viridis(option = \"magma\", begin = 0.10, end = 0.95) +\n  theme_bw() +\n  theme(legend.position = \"none\")\n\n\n\n\nMy default for categorical color schemes is the ‘dark2’ palette from RColorBrewer; but given the subject matter of our work, it’s worth mentioning the wonderful feather package by Shandiya Balasubramaniam, which gives colors based on Australian bird plumage\n\n\n# remotes::install_github(repo = \"shandiya/feathers\")\nlibrary(feathers)\n\nrcfd <- ala_counts(\n  taxa = select_taxa(\"Rose-crowned Fruit-Dove\"),\n  group_by = \"cl22\")\nrcfd$State <- factor(seq_len(nrow(rcfd)), labels = rcfd$cl22) \n\nggplot(rcfd, aes(x = State, y = log10(count), fill = State)) + \n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_fill_manual(values = get_pal(\"rose_crowned_fruit_dove\")) +\n  theme_bw() +\n  theme(legend.position = \"none\")\n\n\n\n\nAll of this is fine, but what if you have a specific image that you want to take colors from? A logical choice is to pick the colors you want using an image editting program, but if we want to try something automated, there are options in R as well.\nExtracting colors\nNational Eucalypt Day aims to raise awareness about Eucalypts and celebrate their influence on the lives of Australians. In honour of National Eucalypt day, we wanted to created a plot based on occurrences data held in the Atlas of Living Australia, themed using colours from actual Eucalypts.\nWe used this image from a tweet by Dean Nicolle:\n\nHappy 'National Eucalypt Day'!The Western Australian gimlet (Eucalyptus salubris) has just been announced as Eucalypt of the Year for 2021. Renowned for its fluted, smooth, shiny, and colourful trunk & branches. pic.twitter.com/pOsufQtxWS— Dean Nicolle (@DeanNicolle1) March 22, 2021\n\n\nImage of Eucalyptus salubris by Dean NicolleFirst, get observations of the Eucalypt of the Year 2021 from ALA using the galah package. Specifically, we use ala_counts() to determine how many records of Eucalyptus salubris are held by the ALA:\n\n\nn_records <- ala_counts(taxa = select_taxa(\"Eucalyptus salubris\"))\n\n\n\nThen get a color scheme from images of the species in question using the paletter package (which needs to be installed from GitHub) \n\n\n# remotes::install_github(\"AndreaCirilloAC/paletter\")\nlibrary(paletter)\n\nimage_pal <- create_palette(\n  image_path = \"./data/Dean_Nicolle_Esalubris_image_small.jpeg\",\n  type_of_variable = \"categorical\",\n  number_of_colors = 15)\n\n\n\n\n\n\nNote that we downsized the image before running the paletter code, as large images take much longer to process.\nCreating a plot\nOnce we have this palette, the obvious question is what kind of plot to draw. We could have done a map, but those can be a bit boring. We decided to try something that represented the number of observations we had of this species at ALA, and included color, but was otherwise just a pretty picture that didn’t need to contain any further information. Rather than have a traditional x and y axis, therefore, we decided to try out the igraph package to plot the points in an interesting way.\nFirst, we create a vector containing as many points as we want to display, and distribute our colors among them as evenly as possible\n\n\n# create a vector to index colours\ncolour_index <- rep(seq_along(image_pal),\n  each = floor(n_records / length(image_pal)))\n# correct rounding errors\ncolour_index <- c(colour_index,\n  rep(length(image_pal), n_records - length(colour_index)))\n\n\n\nThen we can create a network using igraph, and use it to create a layout for our points\n\n\nlibrary(igraph)\n\ngraph_list <- lapply(c(1:15), function(a){\n  lookup <- which(colour_index == a)\n  return(data.frame(\n    from = lookup[c(1:(length(lookup)-1))],\n    to = lookup[c(2:length(lookup))]))\n  })\ngraph_df <- as.matrix(do.call(rbind, graph_list))         # build matrix\ncolour_graph <- graph_from_edgelist(graph_df)             # create network graph\n\n# convert to a set of point locations\ntest_layout <- as.data.frame(layout_nicely(colour_graph)) # convert to df\ncolnames(test_layout) <- c(\"x\", \"y\")                      # change colnames\ntest_layout$colour_index <- factor(colour_index)          # add colour_index col\n\n\n\nFinally, we draw the plot with ggplot2, removing axes with theme_void()\n\n\nggplot(test_layout, aes(x = x, y = y, colour = colour_index)) +\n  geom_point(size = 3, alpha = 0.9) +\n  scale_color_manual(values = image_pal) +\n  coord_fixed() +\n  theme_void() +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\nThat’s it! While I like the effect here, I think the paletter package is best suited to cases where there are large areas of strongly contrasting colors; it’s less ideal for images with subtle color differences. It also doesn’t appear to have been updated lately, which may mean it’s not being supported any more. But I’m happy with this plot, and would definitely consider using it again.\n\n\n\n",
    "preview": "posts/2021-03-20_creating-a-color-palette-from-an-image/distill-preview.png",
    "last_modified": "2022-03-24T12:27:20+11:00",
    "input_file": {}
  }
]
